<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int HEAD_SENSORS = 6;
const int TAIL_SENSORS = 5;
const int BELTS = 7;
const int STATIONS = 6;
const int MERGERS = 1;
const int FLOW_CONTROLLERS = 1;

const int BELT_SPEED = 1;
const int MAX_SLOTS = 29;

typedef int[0, MAX_SLOTS-1] belt_pos_t;
typedef int[0, HEAD_SENSORS-1] head_sensor_t;
typedef int[0, TAIL_SENSORS-1] tail_sensor_t;
typedef int[0, BELTS-1] belt_t;
typedef int[0, STATIONS-1] station_t;
typedef int[-1, MAX_SLOTS] pos_t;

typedef struct { 
    pos_t head, tail, length;
    int pieces;
} belt_config_t;

typedef struct {
    int processing_time;
    belt_t input, output;
} station_config_t;

typedef struct {
    belt_t belt;
    pos_t pos;
    station_t station;
} sensor_config_t;

const belt_config_t belt_conf[BELTS] = {
    {3, 14, 17, 3}, 
    {3, 13, 20, 0},
    {2, -1, 29, 0},
    {4, 13, 16, 0},
    {3, 6, 8, 0},
    {-1, -1, 5, 0},
    {1, 3, 10, 0}
};

const station_config_t station_conf[STATIONS] = {
    {1, 0, 1},
    {1, 1, 2},
    {1, 2, 4},
    {1, 4, 5},
    {1, 3, 6},
    {1, 6, 0}
};

const sensor_config_t head_sensor_conf[HEAD_SENSORS] = {
  {0, 3, 0},
  {1, 3, 1},
  {2, 2, 2},
  {4, 3, 3},
  {3, 4, 4},
  {6, 1, 5}
};

const sensor_config_t tail_sensor_conf[TAIL_SENSORS] = {
    {0, 14, 0},
    {1, 13, 0},
    {3, 13, 0},
    {4, 6, 0},
    {6, 3, 0}
};

broadcast chan move, tick, tick_components, init_done;
broadcast chan free[STATIONS];
 
bool belts[BELTS][MAX_SLOTS];
bool gate[BELTS];
bool wait[BELTS];

// TOTAL PIECES
// sum(k : belt_t) belt_conf[k].pieces
// int total_pieces = 0;

// PIECES BEING PROCESSED
// sum(x : station_t) not StationV2(x).waiting
//int processing_pieces = 0;

// PIECES ON BELT
// sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j]
//int pieces_on_belt = 0;

// inc/dec pieces under processing
/*
void increase() {
    processing_pieces++;
    
    pieces_on_belt--;
}

void decrease() {
    processing_pieces--;
    
    pieces_on_belt++;
}
*/</declaration>
	<template>
		<name>MergerV2</name>
		<parameter>const belt_t belt, const pos_t pos, const belt_t other</parameter>
		<declaration>void mergeBelts() {
    belts[belt][pos+1] = belts[other][0];
    belts[other][0] = false;
}</declaration>
		<location id="id0" x="238" y="-59">
			<name x="212" y="-93">waiting</name>
		</location>
		<init ref="id0"/>
		<transition id="id1">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="330" y="-43">!belts[belt][pos+1] &amp;&amp; belts[other][0]</label>
			<label kind="synchronisation" x="330" y="-26">tick_components?</label>
			<label kind="assignment" x="330" y="-9">mergeBelts()</label>
			<nail x="238" y="17"/>
			<nail x="322" y="17"/>
			<nail x="322" y="-59"/>
		</transition>
	</template>
	<template>
		<name>StationV2</name>
		<parameter>const station_t id</parameter>
		<declaration>clock x;

int processing_time() {
    return station_conf[id].processing_time;
}

belt_t input() {
    return station_conf[id].input;
}

belt_t output() {
    return station_conf[id].output;
}

pos_t length() {
    return belt_conf[output()].length;
}

void offload() {
    //decrease();
    
    belts[output()][length()-1] = true;
}

void load() {
    //increase();
    
    belts[input()][0] = false;
}</declaration>
		<location id="id2" x="-841" y="-374">
			<name x="-867" y="-408">waiting</name>
		</location>
		<location id="id3" x="-841" y="-154">
			<name x="-884" y="-137">processing</name>
			<label kind="invariant" x="-1045" y="-187">x &lt;= processing_time()</label>
		</location>
		<location id="id4" x="-518" y="-153">
			<name x="-577" y="-136">processing_over</name>
		</location>
		<location id="id5" x="-519" y="-374">
			<name x="-570" y="-408">update_sensor</name>
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id6">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-731" y="-425">free[id]!</label>
			<label kind="assignment" x="-731" y="-408">offload()</label>
		</transition>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-510" y="-289">!wait[output()]</label>
			<label kind="synchronisation" x="-510" y="-272">move?</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-782" y="-178">x &gt;= processing_time()</label>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-833" y="-297">belts[input()][0]</label>
			<label kind="synchronisation" x="-833" y="-280">tick_components?</label>
			<label kind="assignment" x="-833" y="-263">x = 0, load()</label>
		</transition>
	</template>
	<template>
		<name>TailSensorV2</name>
		<parameter>const tail_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return tail_sensor_conf[id].belt;
}

pos_t pos() {
    return tail_sensor_conf[id].pos;
}

station_t station() {
    return tail_sensor_conf[id].station;
}

void update() {
    wait[belt()] = belts[belt()][pos()];
}</declaration>
		<location id="id10" x="-76" y="-76">
			<name x="-102" y="-110">start</name>
		</location>
		<location id="id11" x="-76" y="93">
			<name x="-59" y="68">queueing</name>
		</location>
		<location id="id12" x="187" y="221">
			<name x="212" y="212">queue_full</name>
		</location>
		<init ref="id10"/>
		<transition id="id13">
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="195" y="93">!belts[belt()][pos()]</label>
			<label kind="synchronisation" x="203" y="110">move?</label>
			<label kind="assignment" x="203" y="127">update()</label>
			<nail x="187" y="93"/>
		</transition>
		<transition id="id14">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-76" y="229">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="-76" y="246">move?</label>
			<label kind="assignment" x="-76" y="263">update()</label>
			<nail x="-76" y="221"/>
		</transition>
		<transition id="id15">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-68" y="-17">init_done?</label>
			<label kind="assignment" x="-68" y="0">update()</label>
		</transition>
	</template>
	<template>
		<name>FlowV2</name>
		<parameter>const belt_t belt, const pos_t pos, const belt_t other, const int policy</parameter>
		<declaration>pos_t length() {
    return belt_conf[other].length;
}

bool branch = false;

// POLICY SCHEDULE
// 0 --&gt; Go to the free station
// 1 --&gt; Keep flowing, do nothing
// 2 --&gt; Switch every time
// 3 --&gt; Round-robin

void switchBelt() {
    if (policy == 1) { return; }
    
    if (policy == 0 &amp;&amp; !gate[belt]) {
        belts[belt][pos] = false;
        belts[other][length()-1] = true;
    } else if (policy == 2){
            belts[belt][pos] = false;
            belts[other][length()-1] = true;
        }
        else {
            if (branch) {
                belts[belt][pos] = false;
                belts[other][length()-1] = true;
            }
            
            branch = !branch;
        }
}</declaration>
		<location id="id16" x="-34" y="-68">
			<name x="-68" y="-102">wait_piece</name>
		</location>
		<init ref="id16"/>
		<transition id="id17">
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="guard" x="76" y="-34">belts[belt][pos]</label>
			<label kind="synchronisation" x="76" y="-17">tick_components?</label>
			<label kind="assignment" x="76" y="0">switchBelt()</label>
			<nail x="-34" y="17"/>
			<nail x="59" y="17"/>
			<nail x="59" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Belt</name>
		<declaration>clock x;

pos_t head(belt_t id) {
    return belt_conf[id].head;
}

pos_t length(belt_t id) {
    return belt_conf[id].length;
}

pos_t tail(belt_t id) {
    return belt_conf[id].tail;
}

int max_queue(belt_t id) {
    pos_t head = (head(id) == -1) ? 0 : head(id);
    pos_t tail = (tail(id) == -1) ? length(id) : tail(id);

    return tail-head + 1;
}

// I need two methods, one that updates from the first segment to the head sensor and one that updates everything else
// this second method if the head is -1 needs to do nothing since the first method has already taken care of everything

// One belt to rule them all... We need to change the move_belt function: iteratote on all belts to update them
// Together with this change simplify the initializer... which can be merged with the Belt
// When the clock reach BELT_SPEED send the tick_components signal and a single, broadcast move_belt

void move_head(belt_t id) {
    int i;
    int limit = (head(id) == -1)?length(id):head(id);
    
    for (i = 1; i &lt; limit; i++) {
        if (belts[id][i-1] == 0) {
            belts[id][i-1] = belts[id][i];
            belts[id][i] = 0;
        }
    }
}

void move_tail(belt_t id) {
    int i;
    
    if (head(id) != -1) {
        for (i = head(id)+1; i &lt; length(id); i++) {
            if (belts[id][i-1] == 0) {
                belts[id][i-1] = belts[id][i];
                belts[id][i] = 0;
            }
        }
    }
}

void move_gate(belt_t id) {
    if (gate[id]) {
        if (head(id) &gt; 0 &amp;&amp; belts[id][head(id)-1] == 0) {
            belts[id][head(id)-1] = belts[id][head(id)];
            belts[id][head(id)] = 0;
        }
    }
}

void move_belt() {

    for(i : belt_t) {
        move_head(i);
        
        move_gate(i);
    
        move_tail(i);
    }
}

/*
Old methods

void update_count() {
    int i, j;
    int app = 0;
    
    for (i = 0; i &lt; BELTS; i++) {
        for(j = 0; j &lt; belt_conf[i].length;j++) {
            app += belts[i][j];
        }
    }
    
    pieces_on_belt = app;
}

void pop() {
    belts[id][0] -= 1;
}

bool head_occupied() {
    return belts[id][0];
}

void add_last() {
    belts[id][length()-1] += 1;
}
*/</declaration>
		<location id="id18" x="501" y="-59">
			<name x="484" y="-93">start</name>
		</location>
		<location id="id19" x="280" y="-59">
			<label kind="invariant" x="270" y="-42">x &lt;=BELT_SPEED</label>
		</location>
		<location id="id20" x="51" y="-59">
			<committed/>
		</location>
		<init ref="id18"/>
		<transition id="id21">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="110" y="-238">move!</label>
			<label kind="assignment" x="110" y="-221">move_belt(),
x = 0</label>
			<nail x="51" y="-170"/>
			<nail x="280" y="-170"/>
		</transition>
		<transition id="id22">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="119" y="-51">x&gt;=BELT_SPEED</label>
			<label kind="synchronisation" x="110" y="-34">tick_components!</label>
		</transition>
		<transition id="id23">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="348" y="-59">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>void init_all() {
    int i, j;
    
    for (i = 0; i &lt; BELTS; i++) {
        if (belt_conf[i].head == -1) {
            for (j = 0; j &lt; belt_conf[i].pieces; j++) {
                belts[i][i] = 1;
            }
        }
        else {
            for (j = belt_conf[i].head; j &lt; belt_conf[i].pieces + belt_conf[i].head; j++) {
                belts[i][j] = 1;
            }
        }
        
        //pieces_on_belt += belt_conf[i].pieces;
    }
    //total_pieces = pieces_on_belt;
}

</declaration>
		<location id="id24" x="42" y="-42">
			<name x="0" y="-76">init_over</name>
		</location>
		<location id="id25" x="-136" y="-42">
			<name x="-170" y="-76">start</name>
			<committed/>
		</location>
		<init ref="id25"/>
		<transition id="id26">
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-93" y="-17">init_done!</label>
			<label kind="assignment" x="-93" y="-34">init_all()</label>
		</transition>
	</template>
	<template>
		<name>HeadSensorV2</name>
		<parameter>const head_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return head_sensor_conf[id].belt;
}

pos_t pos() {
    return head_sensor_conf[id].pos;
}

station_t station() {
    return head_sensor_conf[id].station;
}</declaration>
		<location id="id27" x="161" y="-59">
		</location>
		<location id="id28" x="-93" y="-59">
			<name x="-136" y="-42">triggered</name>
		</location>
		<location id="id29" x="-323" y="-59">
			<name x="-348" y="-42">start</name>
		</location>
		<init ref="id29"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-272" y="-102">init_done?</label>
			<label kind="assignment" x="-272" y="-85">gate[belt()] = true</label>
		</transition>
		<transition id="id31">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-59" y="-187">free[id]?</label>
			<label kind="assignment" x="-59" y="-170">gate[belt()] = true</label>
			<nail x="161" y="-136"/>
			<nail x="-93" y="-136"/>
		</transition>
		<transition id="id32">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-42" y="-51">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="-42" y="-34">move?</label>
			<label kind="assignment" x="-42" y="-17">gate[belt()] = false</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// POLICY SCHEDULE
// 0 --&gt; Go to the free station
// 1 --&gt; Keep flowing, do nothing
// 2 --&gt; Switch every time
// 3 --&gt; Round-robin

Flow = FlowV2(2, 3, 3, /*policy schedule*/3);
Merge = MergerV2(6, 4, 5);

system Initializer, Belt, StationV2, Flow, Merge, HeadSensorV2, TailSensorV2;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Always for all paths the model doesn't incur into deadlock state</comment>
			<result outcome="success" type="quality" timestamp="2023-06-14 11:50:52 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (Initializer.init_over imply (sum(x : station_t) not StationV2(x).waiting) + (sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j]) == sum(k : belt_t) belt_conf[k].pieces)</formula>
			<comment>Always for all paths, once initilized, the pieces in the system remain the same,this also verify that two pieces never overlap since that would cause a piece to disappear</comment>
			<result outcome="success" type="quality" timestamp="2023-06-14 11:54:21 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i : belt_t) forall(j : belt_pos_t) belts[i][j] &lt; 2)</formula>
			<comment>Always for all paths it never happens that in the belt two pieces overlap</comment>
			<result outcome="success" type="quality" timestamp="2023-06-14 11:51:25 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (Initializer.init_over imply forall(i :  belt_t) ((sum(j : belt_pos_t) belts[i][j])&lt;=Belt.max_queue(i)))</formula>
			<comment>Always for all paths the pieces on the belts are within the queue length once the system in initialized</comment>
			<result outcome="success" type="quality" timestamp="2023-06-14 12:01:03 +0200">
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=200] {
sum(k : belt_t) belt_conf[k].pieces,
sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j],
sum(x : station_t) not StationV2(x).waiting
}</formula>
			<comment>In order:
- total pieces in the system
- pieces on belt
- pieces being processed</comment>
			<result outcome="success" type="quality" timestamp="2023-06-14 12:02:58 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="sum (k:(const (label belt_t:(range (int) &quot;0&quot; &quot;BELTS - 1&quot;)))) belt_conf[k].pieces" type="l" color="0xff0000" encoding="csv">0.0,3.0
200.000002,3.0
					</series>
					<series title="sum (i:(const (label belt_t:(range (int) &quot;0&quot; &quot;BELTS - 1&quot;)))) sum (j:(const (label belt_pos_t:(range (int) &quot;0&quot; &quot;MAX_SLOTS - 1&quot;)))) belts[i][j]" type="l" color="0x00ff00" encoding="csv">0.0,0.0
0.0,3.0
4.0,3.0
4.0,2.0
6.0,2.0
6.0,3.0
10.0,3.0
10.0,2.0
11.0,2.0
11.0,3.0
15.0,3.0
15.0,2.0
16.0,2.0
16.0,3.0
26.0,3.0
26.0,2.0
27.0,2.0
27.0,3.0
31.0,3.0
31.0,2.0
32.0,2.0
32.0,3.0
36.0,3.0
36.0,2.0
38.0,2.0
38.0,3.0
56.0,3.0
56.0,2.0
57.0,2.0
57.0,3.0
65.0,3.0
65.0,2.0
67.0,2.0
67.0,1.0
67.0,2.0
69.0,2.0
69.0,3.0
73.0,3.0
73.0,2.0
75.0,2.0
75.0,3.0
77.0,3.0
77.0,1.0
78.0,1.0
78.0,3.0
85.0,3.0
85.0,2.0
87.0,2.0
87.0,3.0
89.0,3.0
89.0,2.0
91.0,2.0
91.0,3.0
95.0,3.0
95.0,2.0
97.0,2.0
97.0,3.0
104.0,3.0
104.0,2.0
105.0,2.0
105.0,3.0
109.0,3.0
109.0,2.0
111.0,2.0
111.0,3.0
117.0,3.0
117.0,2.0
119.0,2.0
119.0,3.0
125.0,3.0
125.0,2.0
127.0,2.0
127.0,3.0
131.0,3.0
131.0,2.0
133.0,2.0
133.0,3.0
156.0,3.0
156.0,2.0
157.0,2.0
157.0,3.0
160.0,3.0
160.0,2.0
162.0,2.0
162.0,3.0
165.0,3.0
165.0,2.0
167.0,2.0
167.0,3.0
172.0,3.0
172.0,2.0
174.0,2.0
174.0,1.0
174.0,2.0
175.0,2.0
175.0,3.0
177.0,3.0
177.0,2.0
178.0,2.0
178.0,3.0
185.0,3.0
185.0,2.0
187.0,2.0
187.0,3.0
191.0,3.0
191.0,2.0
193.0,2.0
193.0,3.0
197.0,3.0
197.0,2.0
198.0,2.0
198.0,3.0
200.000002,3.0
					</series>
					<series title="sum (x:(const (label station_t:(range (int) &quot;0&quot; &quot;STATIONS - 1&quot;)))) !StationV2[x].waiting" type="l" color="0x0000ff" encoding="csv">0.0,0.0
4.0,0.0
4.0,1.0
6.0,1.0
6.0,0.0
10.0,0.0
10.0,1.0
11.0,1.0
11.0,0.0
15.0,0.0
15.0,1.0
16.0,1.0
16.0,0.0
26.0,0.0
26.0,1.0
27.0,1.0
27.0,0.0
31.0,0.0
31.0,1.0
32.0,1.0
32.0,0.0
36.0,0.0
36.0,1.0
38.0,1.0
38.0,0.0
56.0,0.0
56.0,1.0
57.0,1.0
57.0,0.0
65.0,0.0
65.0,1.0
67.0,1.0
67.0,2.0
67.0,1.0
69.0,1.0
69.0,0.0
73.0,0.0
73.0,1.0
75.0,1.0
75.0,0.0
77.0,0.0
77.0,2.0
78.0,2.0
78.0,0.0
85.0,0.0
85.0,1.0
87.0,1.0
87.0,0.0
89.0,0.0
89.0,1.0
91.0,1.0
91.0,0.0
95.0,0.0
95.0,1.0
97.0,1.0
97.0,0.0
104.0,0.0
104.0,1.0
105.0,1.0
105.0,0.0
109.0,0.0
109.0,1.0
111.0,1.0
111.0,0.0
117.0,0.0
117.0,1.0
119.0,1.0
119.0,0.0
125.0,0.0
125.0,1.0
127.0,1.0
127.0,0.0
131.0,0.0
131.0,1.0
133.0,1.0
133.0,0.0
156.0,0.0
156.0,1.0
157.0,1.0
157.0,0.0
160.0,0.0
160.0,1.0
162.0,1.0
162.0,0.0
165.0,0.0
165.0,1.0
167.0,1.0
167.0,0.0
172.0,0.0
172.0,1.0
174.0,1.0
174.0,2.0
174.0,1.0
175.0,1.0
175.0,0.0
177.0,0.0
177.0,1.0
178.0,1.0
178.0,0.0
185.0,0.0
185.0,1.0
187.0,1.0
187.0,0.0
191.0,0.0
191.0,1.0
193.0,1.0
193.0,0.0
197.0,0.0
197.0,1.0
198.0,1.0
198.0,0.0
200.000002,0.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=200] {
(sum(x : station_t) not StationV2(x).waiting) + (sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j]),
sum(k : belt_t) belt_conf[k].pieces
}</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-14 11:48:55 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="(sum (x:(const (label station_t:(range (int) &quot;0&quot; &quot;STATIONS - 1&quot;)))) !StationV2[x].waiting) + (sum (i:(const (label belt_t:(range (int) &quot;0&quot; &quot;BELTS - 1&quot;)))) sum (j:(const (label belt_pos_t:(range (int) &quot;0&quot; &quot;MAX_SLOTS - 1&quot;)))) belts[i][j])" type="l" color="0xff0000" encoding="csv">0.0,0.0
0.0,12.0
200.000002,12.0
					</series>
					<series title="sum (k:(const (label belt_t:(range (int) &quot;0&quot; &quot;BELTS - 1&quot;)))) belt_conf[k].pieces" type="l" color="0x00ffff" encoding="csv">0.0,12.0
200.000002,12.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
