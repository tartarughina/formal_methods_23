<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int HEAD_SENSORS = 6;
const int TAIL_SENSORS = 5;
const int BELTS = 7;
const int STATIONS = 6;
const int MERGERS = 1;
const int FLOW_CONTROLLERS = 1;

const int BELT_SPEED = 1;
const int SLOTS = 105;

typedef int[0, SLOTS-1] belt_pos_t;
typedef int[-1, SLOTS-1] pos_t;
typedef int[0, HEAD_SENSORS-1] head_sensor_t;
typedef int[0, TAIL_SENSORS-1] tail_sensor_t;
typedef int[0, BELTS-1] belt_t;
typedef int[0, STATIONS-1] station_t;

typedef struct { 
    pos_t head, tail, head_sensor, tail_sensor;
    int pieces;
} belt_config_t;

typedef struct {
    int processing_time;
    belt_t output_belt;
    pos_t in, out;
} station_config_t;

typedef struct {
    belt_t belt;
    pos_t pos;
    station_t station;
} sensor_config_t;

const belt_config_t belt_conf[BELTS] = {
    {16, 0, 13, 2, 5},
    {36, 17, 33, 23, 0},
    {65, 37, 63, -1, 0},
    {81, 66, 78, 69, 0},
    {89, 82, 86, 83, 0},
    {94, 90, -1, -1, 0},
    {104, 95, 103, 101, 0}
};

const station_config_t station_conf[STATIONS] = {
    {1, 1, 16, 17},
    {1, 2, 36, 37},
    {1, 4, 65, 82},
    {1, 6, 89, 90},
    {1, 6, 81, 95},
    {1, 0, 104, 0}
};

const sensor_config_t head_sensor_conf[HEAD_SENSORS] = {
  {0, 13, 0},
  {1, 33, 1},
  {2, 63, 2},
  {3, 78, 4},
  {4, 86, 3},
  {6, 103, 5}
};

const sensor_config_t tail_sensor_conf[TAIL_SENSORS] = {
    {0, 2, 5},
    {1, 23, 0},
    {3, 69, 1},
    {4, 83, 2},
    {6, 101, 5}
};

int total_pieces = 0;
int processing_pieces = 0;
int pieces_on_belt = 0;

// signal for all the sensors placed on a belt
broadcast chan move;
broadcast chan tick;
broadcast chan tick_components;
broadcast chan init_done;

// either we change the logic of the sensor to listen for the load signal or put another param to the station avoiding
//chan load[BELTS];
//chan push[STATIONS];
broadcast chan free[STATIONS];
// free and load should be merged together and made broadcast 

//int[0,1] belts[BELTS][MAX_SLOTS];
int[0,1] belt[105];
bool gate[BELTS];
bool wait[BELTS];
// int FLOW_OUTPUTS[2] = {3, 4};

void increase() {
    processing_pieces++;
}

void decrease() {
    processing_pieces--;
}</declaration>
	<template>
		<name>MergerV2</name>
		<parameter>const pos_t in, const pos_t out</parameter>
		<declaration>void mergeBelts() {
    belt[out-1] = belt[in];
    belt[in] = 0;
}</declaration>
		<location id="id0" x="0" y="-59">
			<name x="-59" y="-75">start</name>
		</location>
		<location id="id1" x="239" y="-58">
			<name x="213" y="-92">waiting</name>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="331" y="-42">!belt[out-1]</label>
			<label kind="synchronisation" x="331" y="-25">tick_components?</label>
			<label kind="assignment" x="331" y="-8">mergeBelts()</label>
			<nail x="239" y="18"/>
			<nail x="323" y="18"/>
			<nail x="323" y="-58"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="69" y="-84">init_done?</label>
		</transition>
	</template>
	<template>
		<name>StationV2</name>
		<parameter>const station_t id</parameter>
		<declaration>clock x;

int processing_time() {
    return station_conf[id].processing_time;
}

pos_t input() {
    return station_conf[id].in;
}

pos_t output() {
    return station_conf[id].out;
}

belt_t output_belt() {
    return station_conf[id].output_belt;
}

void addLast() {
    decrease();
    
    belt[output()] += 1;
}</declaration>
		<location id="id4" x="-1139" y="-374">
			<name x="-1156" y="-408">start</name>
		</location>
		<location id="id5" x="-841" y="-374">
			<name x="-867" y="-408">waiting</name>
		</location>
		<location id="id6" x="-841" y="-154">
			<name x="-884" y="-137">processing</name>
			<label kind="invariant" x="-1045" y="-187">x &lt;= processing_time()</label>
		</location>
		<location id="id7" x="-518" y="-153">
			<name x="-577" y="-136">processing_over</name>
		</location>
		<location id="id8" x="-519" y="-374">
			<name x="-570" y="-408">update_sensor</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-731" y="-425">free[id]!</label>
			<label kind="assignment" x="-731" y="-408">addLast()</label>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-510" y="-289">!wait[output_belt()]</label>
			<label kind="synchronisation" x="-510" y="-272">move?</label>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-782" y="-178">x &gt;= processing_time()</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-833" y="-297">belt[input()]</label>
			<label kind="synchronisation" x="-833" y="-280">tick_components?</label>
			<label kind="assignment" x="-833" y="-263">x = 0, increase(), 
belt[input()] = 0</label>
		</transition>
		<transition id="id13">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1062" y="-400">init_done?</label>
		</transition>
	</template>
	<template>
		<name>TailSensorV2</name>
		<parameter>const tail_sensor_t id</parameter>
		<declaration>belt_t belt_id() {
    return tail_sensor_conf[id].belt;
}

pos_t pos() {
    return tail_sensor_conf[id].pos;
}

station_t station() {
    return tail_sensor_conf[id].station;
}

void update() {
    wait[belt_id()] = belt[pos()];
}</declaration>
		<location id="id14" x="-76" y="-76">
			<name x="-102" y="-110">start</name>
		</location>
		<location id="id15" x="-76" y="93">
			<name x="-59" y="68">working</name>
		</location>
		<init ref="id14"/>
		<transition id="id16">
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-34" y="195">move?</label>
			<label kind="assignment" x="-34" y="229">update()</label>
			<nail x="-76" y="221"/>
			<nail x="102" y="221"/>
			<nail x="102" y="93"/>
		</transition>
		<transition id="id17">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-68" y="-17">init_done?</label>
			<label kind="assignment" x="-68" y="0">update()</label>
		</transition>
	</template>
	<template>
		<name>FlowV2</name>
		<parameter>const belt_t belt_id, const pos_t pos, const pos_t out</parameter>
		<declaration>void switchBelt() {
    if(!gate[belt_id]) {
        belt[pos] = 0;
        belt[out] += 1;
    }
}</declaration>
		<location id="id18" x="-246" y="-68">
			<name x="-305" y="-85">start</name>
		</location>
		<location id="id19" x="-34" y="-68">
			<name x="-76" y="-102">wait_piece</name>
		</location>
		<init ref="id18"/>
		<transition id="id20">
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="guard" x="76" y="-34">belt[pos]</label>
			<label kind="synchronisation" x="76" y="-17">tick_components?</label>
			<label kind="assignment" x="76" y="0">switchBelt()</label>
			<nail x="-34" y="17"/>
			<nail x="59" y="17"/>
			<nail x="59" y="-68"/>
		</transition>
		<transition id="id21">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-186" y="-93">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Belt</name>
		<declaration>clock x;

pos_t head(belt_t id) {
    return belt_conf[id].head;
}

pos_t tail(belt_t id) {
    return belt_conf[id].tail;
}

pos_t head_sensor(belt_t id) {
    return belt_conf[id].head_sensor;
}

pos_t tail_sensor(belt_t id) {
    return belt_conf[id].tail_sensor;
}

int max_queue(belt_t id) {
    pos_t head = (head_sensor(id) == -1) ? head(id) : head_sensor(id);
    pos_t tail = (tail_sensor(id) == -1) ? tail(id) : tail_sensor(id);

    return tail-head + 1;
}

// I need two methods, one that updates from the first segment to the head sensor and one that updates everything else
// this second method if the head is -1 needs to do nothing since the first method has already taken care of everything

// One belt to rule them all... We need to change the move_belt function: iteratote on all belts to update them
// Together with this change simplify the initializer... which can be merged with the Belt
// When the clock reach BELT_SPEED send the tick_components signal and a single, broadcast move_belt

void move_head(belt_t id) {
    int i;
    int limit = (head_sensor(id) == -1)?tail(id):head_sensor(id) + 1;
    
    for (i = head(id); i &gt; limit; i--) {
        if (belt[i] == 0) {
            belt[i] = belt[i-1];
            belt[i-1] = 0;
        }
    }
}

void move_tail(belt_t id) {
    int i;
    
    if (head_sensor(id) != -1) {
        for (i = head_sensor(id); i &gt; tail(id); i--) {
            if (belt[i] == 0) {
                belt[i] = belt[i-1];
                belt[i-1] = 0;
            }
        }
    }
}

void move_gate(belt_t id) {
    if (gate[id]) {
        if (head_sensor(id) &gt; 0 &amp;&amp; belt[head_sensor(id)+1] == 0) {
            belt[head_sensor(id)+1] = belt[head_sensor(id)];
            belt[head_sensor(id)] = 0;
        }
    }
}

void move_belt() {
    for(i : belt_t) {
        move_head(i);
        
        move_gate(i);
    
        move_tail(i);
    }
}

void update_count() {  
    pieces_on_belt = (sum(j : belt_pos_t) belt[j]);
}

/*
Old methods 

void pop() {
    belts[id][0] -= 1;
}

bool head_occupied() {
    return belts[id][0];
}

void add_last() {
    belts[id][length()-1] += 1;
}
*/</declaration>
		<location id="id22" x="501" y="-59">
			<name x="484" y="-93">start</name>
		</location>
		<location id="id23" x="280" y="-59">
			<label kind="invariant" x="270" y="-42">x &lt;=BELT_SPEED</label>
		</location>
		<location id="id24" x="51" y="-59">
			<committed/>
		</location>
		<init ref="id22"/>
		<transition id="id25">
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="110" y="-246">move!</label>
			<label kind="assignment" x="110" y="-229">move_belt(),
update_count(),
x = 0</label>
			<nail x="51" y="-170"/>
			<nail x="280" y="-170"/>
		</transition>
		<transition id="id26">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="119" y="-51">x&gt;=BELT_SPEED</label>
			<label kind="synchronisation" x="110" y="-34">tick_components!</label>
		</transition>
		<transition id="id27">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="348" y="-59">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>void init_all() {
    int i, j;
    int start;
    
    for (i = 0; i &lt; BELTS; i++) {
        start = (belt_conf[i].head_sensor == -1)?belt_conf[i].head:belt_conf[i].head_sensor;
        
        for (j = 0; j &lt; belt_conf[i].pieces; j++) {
            belt[start-j] = 1;
        }
        
        pieces_on_belt += belt_conf[i].pieces;
    }
    total_pieces = pieces_on_belt;
}

</declaration>
		<location id="id28" x="42" y="-42">
			<name x="0" y="-76">init_over</name>
		</location>
		<location id="id29" x="-136" y="-42">
			<name x="-170" y="-76">start</name>
			<committed/>
		</location>
		<init ref="id29"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-93" y="-17">init_done!</label>
			<label kind="assignment" x="-93" y="-34">init_all()</label>
		</transition>
	</template>
	<template>
		<name>HeadSensorV2</name>
		<parameter>const head_sensor_t id</parameter>
		<declaration>belt_t belt_id() {
    return head_sensor_conf[id].belt;
}

pos_t pos() {
    return head_sensor_conf[id].pos;
}

station_t station() {
    return head_sensor_conf[id].station;
}</declaration>
		<location id="id31" x="161" y="-59">
			<name x="178" y="-68">station_busy</name>
		</location>
		<location id="id32" x="-93" y="-59">
			<name x="-153" y="-42">station_free</name>
		</location>
		<location id="id33" x="-323" y="-59">
			<name x="-348" y="-42">start</name>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-306" y="-102">init_done?</label>
			<label kind="assignment" x="-306" y="-85">gate[belt_id()] = true</label>
		</transition>
		<transition id="id35">
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-59" y="-187">free[station()]?</label>
			<label kind="assignment" x="-59" y="-170">gate[belt_id()] = true</label>
			<nail x="161" y="-136"/>
			<nail x="-93" y="-136"/>
		</transition>
		<transition id="id36">
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-42" y="-51">belt[pos()]</label>
			<label kind="synchronisation" x="-42" y="-34">move?</label>
			<label kind="assignment" x="-42" y="-17">gate[belt_id()] = false</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

Flow = FlowV2(2, 62, 66);
Merge = MergerV2(94, 99);

// List one or more processes to be composed into a system.
//system Initializer, Belt, Station, Flow, Merge, HeadSensor, TailSensor;

system Initializer, Belt, StationV2, Flow, Merge, HeadSensorV2, TailSensorV2;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] (processing_pieces &lt;= STATIONS)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-09 14:28:07 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i : belt_t) forall(j : belt_pos_t) belts[i][j] &lt; 2)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-11 15:21:28 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i :  belt_t) ((sum(j : belt_pos_t) belts[i][j])&lt;=Belt.max_queue(i)))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-06-09 14:54:22 +0200">
			</result>
		</query>
	</queries>
</nta>
