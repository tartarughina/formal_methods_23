<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int SENSORS = 2;
const int BELTS = 2;
const int STATIONS = 2;
const int MERGERS = 0;
const int FLOW_CONTROLLERS = 0;

const int BELT_SPEED = 1;
const int MAX_SLOTS = 32;

typedef int[-1, SENSORS-1] sensor_t;
typedef int[0, BELTS-1] belt_t;
typedef int[0, STATIONS+MERGERS+FLOW_CONTROLLERS-1] station_t;

typedef int[-1, MAX_SLOTS-1] pos_t;
typedef struct { pos_t head, tail, length; int pieces; } config_t;

config_t belt_conf[BELTS] = {{3, 10, 12, 6}, {-1, -1, 17, 0}};

// signal for all the sensors placed on a belt
broadcast chan move[BELTS];
broadcast chan init_done;
chan load[BELTS];
chan push[STATIONS+MERGERS+FLOW_CONTROLLERS];
chan free[STATIONS];
chan offload[STATIONS];

int belts[BELTS][MAX_SLOTS];
bool gate[BELTS];
int FLOW_OUTPUTS[2] = {3, 4};</declaration>
	<template>
		<name>TailSensor</name>
		<parameter>sensor_t id, belt_t belt, pos_t pos, station_t station</parameter>
		<declaration>bool pos_occupied() {
    return belts[belt][pos];
}</declaration>
		<location id="id0" x="-246" y="-25">
			<name x="-263" y="-59">start</name>
		</location>
		<location id="id1" x="-8" y="-25">
			<name x="0" y="-17">queueing</name>
		</location>
		<location id="id2" x="306" y="-25">
			<name x="323" y="-17">queue_full</name>
		</location>
		<location id="id3" x="-8" y="195">
			<name x="8" y="161">offload_station</name>
			<committed/>
		</location>
		<location id="id4" x="306" y="195">
			<name x="331" y="187">hold_station</name>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-102" y="-144">!pos_occupied()</label>
			<label kind="synchronisation" x="-102" y="-127">move[belt]?</label>
			<nail x="-8" y="-102"/>
			<nail x="-93" y="-102"/>
		</transition>
		<transition id="id6">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="110" y="-170">!pos_occupied()</label>
			<label kind="synchronisation" x="110" y="-144">move[belt]?</label>
			<nail x="161" y="-110"/>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="425" y="-85">pos_occupied()</label>
			<label kind="synchronisation" x="425" y="-59">move[belt]?</label>
			<nail x="407" y="-25"/>
			<nail x="407" y="-102"/>
		</transition>
		<transition id="id8">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="306" y="272">pos_occupied()</label>
			<label kind="synchronisation" x="306" y="289">move[belt]?</label>
			<nail x="306" y="272"/>
			<nail x="408" y="272"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-221" y="76">offload[station]?</label>
			<nail x="-68" y="85"/>
		</transition>
		<transition id="id10">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="0" y="76">offload[station]!</label>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="144" y="170">!pos_occupied()</label>
			<label kind="synchronisation" x="144" y="204">move[belt]?</label>
		</transition>
		<transition id="id12">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="314" y="68">offload[station]?</label>
		</transition>
		<transition id="id13">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="85" y="-51">pos_occupied()</label>
			<label kind="synchronisation" x="85" y="-17">move[belt]?</label>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-178" y="-51">init_done?</label>
		</transition>
	</template>
	<template>
		<name>HeadSensor</name>
		<parameter>sensor_t id, belt_t belt, pos_t pos, station_t station</parameter>
		<location id="id15" x="-306" y="-25">
			<name x="-365" y="-34">start</name>
		</location>
		<location id="id16" x="8" y="-25">
			<name x="-119" y="-51">station_free</name>
		</location>
		<location id="id17" x="433" y="-25">
			<name x="450" y="-51">station_busy</name>
		</location>
		<init ref="id15"/>
		<transition id="id18">
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="127" y="-127">free[station]?</label>
			<label kind="assignment" x="127" y="-110">gate[belt] = true</label>
			<nail x="433" y="-85"/>
			<nail x="102" y="-85"/>
		</transition>
		<transition id="id19">
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="442" y="59">move[belt]?</label>
			<nail x="433" y="51"/>
			<nail x="544" y="51"/>
			<nail x="544" y="-25"/>
		</transition>
		<transition id="id20">
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-59" y="-136">free[station]?</label>
			<label kind="assignment" x="-59" y="-119">gate[belt] = true</label>
			<nail x="-34" y="-85"/>
			<nail x="51" y="-85"/>
		</transition>
		<transition id="id21">
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="guard" x="-51" y="42">!belts[belt][pos]</label>
			<label kind="synchronisation" x="-51" y="59">move[belt]?</label>
			<nail x="-34" y="34"/>
			<nail x="51" y="34"/>
		</transition>
		<transition id="id22">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="136" y="-17">belts[belt][pos-1]</label>
			<label kind="synchronisation" x="136" y="0">move[belt]?</label>
			<label kind="assignment" x="136" y="17">gate[belt] = false</label>
			<label kind="comments" x="-221" y="-255">The sensor detected a piece and the station isn't processing anything.
The station will become busy in a couple of tick, let's move to a station busy state</label>
		</transition>
		<transition id="id23">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-280" y="-51">init_done?</label>
			<label kind="assignment" x="-280" y="-25">gate[belt] = true</label>
		</transition>
	</template>
	<template>
		<name>Flow_Controller</name>
		<parameter>station_t id</parameter>
		<declaration>int counter;

void build() {
    counter = 0;
}

belt_t dest() {
    if (counter == 3) {
        return FLOW_OUTPUTS[1];
    }
       
    return FLOW_OUTPUTS[0];   
}

void update() {
    if (counter == 3) {
        counter = 0;
    }
    
    counter++;
}</declaration>
		<location id="id24" x="-298" y="-34">
			<name x="-357" y="-51">start</name>
		</location>
		<location id="id25" x="-86" y="-34">
			<name x="-119" y="-68">wait_piece</name>
		</location>
		<location id="id26" x="-85" y="170">
			<name x="-136" y="187">wait_movement</name>
		</location>
		<location id="id27" x="161" y="170">
			<name x="178" y="161">load_dest</name>
			<committed/>
		</location>
		<init ref="id24"/>
		<transition id="id28">
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="178" y="-8">load[dest()]!</label>
			<nail x="161" y="-34"/>
		</transition>
		<transition id="id29">
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-17" y="144">move[dest()]?</label>
		</transition>
		<transition id="id30">
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-76" y="51">push[id]?</label>
			<label kind="assignment" x="-76" y="76">update()</label>
		</transition>
		<transition id="id31">
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-238" y="-59">init_done?</label>
			<label kind="assignment" x="-238" y="-25">build()</label>
		</transition>
	</template>
	<template>
		<name>Merger</name>
		<parameter>station_t id, belt_t belt</parameter>
		<location id="id32" x="-264" y="-77">
			<name x="-323" y="-93">start</name>
		</location>
		<location id="id33" x="-25" y="-76">
			<name x="-51" y="-110">waiting</name>
		</location>
		<location id="id34" x="-25" y="161">
		</location>
		<location id="id35" x="246" y="161">
			<committed/>
		</location>
		<init ref="id32"/>
		<transition id="id36">
			<source ref="id35"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="110" y="17">load[belt]!</label>
		</transition>
		<transition id="id37">
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="59" y="136">move[belt]?</label>
		</transition>
		<transition id="id38">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-17" y="42">push[id]?</label>
		</transition>
		<transition id="id39">
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-195" y="-102">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>station_t id, int processing_time, belt_t belt, sensor_t sensor</parameter>
		<declaration>clock x;</declaration>
		<location id="id40" x="-408" y="-144">
			<name x="-425" y="-178">start</name>
		</location>
		<location id="id41" x="-110" y="-144">
			<name x="-136" y="-178">waiting</name>
		</location>
		<location id="id42" x="-110" y="76">
			<name x="-153" y="93">processing</name>
			<label kind="invariant" x="-306" y="68">x &lt;= processing_time</label>
		</location>
		<location id="id43" x="212" y="76">
			<name x="153" y="93">processing_over</name>
			<committed/>
		</location>
		<location id="id44" x="476" y="76">
			<name x="425" y="42">waiting_queue</name>
		</location>
		<location id="id45" x="476" y="-144">
			<name x="425" y="-178">offload_piece</name>
			<committed/>
		</location>
		<location id="id46" x="212" y="-144">
			<name x="161" y="-178">update_sensor</name>
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id47">
			<source ref="id43"/>
			<target ref="id45"/>
			<label kind="guard" x="229" y="-59">sensor == -1</label>
		</transition>
		<transition id="id48">
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="297" y="-136">load[belt]!</label>
		</transition>
		<transition id="id49">
			<source ref="id46"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="0" y="-136">free[id]!</label>
		</transition>
		<transition id="id50">
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="501" y="-51">offload[id]?</label>
		</transition>
		<transition id="id51">
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="guard" x="323" y="85">sensor &gt;= 0</label>
			<label kind="synchronisation" x="323" y="110">offload[id]!</label>
			<nail x="450" y="76"/>
		</transition>
		<transition id="id52">
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="guard" x="-51" y="51">x == processing_time</label>
		</transition>
		<transition id="id53">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-102" y="-51">push[id]?</label>
			<label kind="assignment" x="-102" y="-25">x = 0</label>
		</transition>
		<transition id="id54">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-331" y="-170">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Belt</name>
		<parameter>belt_t id, station_t station</parameter>
		<declaration>clock x;

pos_t head;
pos_t tail;
pos_t length;

void build() {
    int i;
    
    head = belt_conf[id].head;
    tail = belt_conf[id].tail;
    length = belt_conf[id].length;
    
    if (head == -1) {
        for (i = 0; i &lt; belt_conf[id].pieces; i++) {
            belts[id][i] = 1;
        }
    }
    else {
        for (i = head; i &lt; belt_conf[id].pieces + head; i++) {
            belts[id][i] = 1;
        }
    }
}

// I need two methods, one that updates from the first segment to the head sensor and one that updates everything else
// this second method if the head is -1 needs to do nothing since the first method has already taken care of everything
void move_head() {
    int i;
    int limit = (head == -1)?length:head;
    
    for (i = 1; i &lt; limit; i++) {
        if (belts[id][i-1] == 0) {
            belts[id][i-1] = belts[id][i];
            belts[id][i] = 0;
        }
    }
}

void move_tail() {
    int i;
    
    if (head != -1) {
        for (i = head+1; i &lt; length; i++) {
            if (belts[id][i-1] == 0) {
                belts[id][i-1] = belts[id][i];
                belts[id][i] = 0;
            }
        }
    }
}


void move_belt() {
    move_head();
    
    if (gate[id]) {
        if (belts[id][head-1] == 0) {
            belts[id][head-1] = belts[id][head];
            belts[id][head] = 0;
        }
    }
    
    move_tail();
}

void pop() {
    belts[id][0] = 0;
}

bool head_occupied() {
    return belts[id][0];
}

void add_last() {
    belts[id][length-1] = 1;
}</declaration>
		<location id="id55" x="467" y="-152">
			<name x="450" y="-186">start</name>
		</location>
		<location id="id56" x="280" y="-59">
			<name x="187" y="-84">gate_open</name>
			<label kind="invariant" x="136" y="-101">x &lt;= BELT_SPEED</label>
		</location>
		<location id="id57" x="51" y="-59">
			<name x="-17" y="-68">moving</name>
			<committed/>
		</location>
		<init ref="id55"/>
		<transition id="id58">
			<source ref="id55"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="324" y="-169">init_done?</label>
			<label kind="assignment" x="324" y="-152">build()</label>
			<nail x="306" y="-152"/>
		</transition>
		<transition id="id59">
			<source ref="id56"/>
			<target ref="id57"/>
			<label kind="guard" x="-272" y="-33">x == 1/BELT_SPEED &amp;&amp; !head_occupied()</label>
			<label kind="assignment" x="-51" y="-8">move_belt()</label>
			<nail x="178" y="52"/>
			<nail x="51" y="52"/>
		</transition>
		<transition id="id60">
			<source ref="id56"/>
			<target ref="id57"/>
			<label kind="guard" x="68" y="-220">x == 1/BELT_SPEED &amp;&amp; head_occupied()</label>
			<label kind="synchronisation" x="69" y="-203">push[station]!</label>
			<label kind="assignment" x="69" y="-186">pop(), move_belt()</label>
			<nail x="280" y="-186"/>
			<nail x="51" y="-186"/>
		</transition>
		<transition id="id61">
			<source ref="id57"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="76" y="-84">move[id]!</label>
			<label kind="assignment" x="76" y="-50">x = 0</label>
		</transition>
		<transition id="id62">
			<source ref="id56"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="238" y="60">load[id]?</label>
			<label kind="assignment" x="238" y="77">add_last()</label>
			<nail x="331" y="52"/>
			<nail x="229" y="52"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<location id="id63" x="-144" y="-42">
			<committed/>
		</location>
		<location id="id64" x="42" y="-42">
		</location>
		<init ref="id63"/>
		<transition id="id65">
			<source ref="id63"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="-93" y="-59">init_done!</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
S1 = Station(0, 1, 0, 1);

B1 = Belt(0, 0);

Head = HeadSensor(0, 0, 3, 0);
Tail = TailSensor(1, 0, 14, 0);

// List one or more processes to be composed into a system.
system Initializer, S1, B1, Head, Tail;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
