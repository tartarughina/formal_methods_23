<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int HEAD_SENSORS = 6;
const int TAIL_SENSORS = 5;
const int BELTS = 7;
const int STATIONS = 6;
const int MERGERS = 1;
const int FLOW_CONTROLLERS = 1;

// const int DESTINATIONS = STATIONS + MERGERS + FLOW_CONTROLLERS;

const int BELT_SPEED = 1;
const int MAX_SLOTS = 29;

// typedef int[0, MAX_SLOTS-1] belt_pos_t;
typedef int[0, HEAD_SENSORS-1] head_sensor_t;
typedef int[0, TAIL_SENSORS-1] tail_sensor_t;
typedef int[0, BELTS-1] belt_t;
typedef int[0, STATIONS-1] station_t;
// typedef int[0, DESTINATIONS-1] dest_t;
typedef int[-1, MAX_SLOTS] pos_t;

typedef struct { 
    pos_t head, tail, length;
    int pieces;
} belt_config_t;

typedef struct {
    int processing_time;
    belt_t input, output;
} station_config_t;

typedef struct {
    belt_t belt;
    pos_t pos;
    station_t station;
} sensor_config_t;

const belt_config_t belt_conf[BELTS] = {
    {3, 14, 17, 2}, 
    {3, 13, 20, 10},
    {2, -1, 29, 0},
    {4, 13, 16, 0},
    {3, 6, 8, 0},
    {-1, -1, 5, 0},
    {1, 3, 10, 0}
};

const station_config_t station_conf[STATIONS] = {
    {1, 0, 1},
    {1, 1, 2},
    {1, 2, 4},
    {1, 4, 5},
    {1, 3, 6},
    {1, 6, 0}
};

const sensor_config_t head_sensor_conf[HEAD_SENSORS] = {
  {0, 3, 0},
  {1, 3, 1},
  {2, 2, 2},
  {3, 4, 4},
  {4, 3, 3},
  {6, 1, 5}
};

const sensor_config_t tail_sensor_conf[TAIL_SENSORS] = {
    {0, 14, 5},
    {1, 13, 0},
    {3, 13, 4},
    {4, 6, 3},
    {6, 3, 5}
};

int total_pieces = 0;
int processing_pieces = 0;
int pieces_on_belt = 0;

// signal for all the sensors placed on a belt
broadcast chan move[BELTS];
broadcast chan tick;
broadcast chan tick_components;
broadcast chan init_done;

// either we change the logic of the sensor to listen for the load signal or put another param to the station avoiding
chan load[BELTS];
chan push[STATIONS];
chan free[STATIONS];
// free and load should be merged together and made broadcast 

int[0,1] belts[BELTS][MAX_SLOTS];
bool gate[BELTS];
bool wait[BELTS];
// int FLOW_OUTPUTS[2] = {3, 4};

void increase() {
    processing_pieces++;
}

void decrease() {
    processing_pieces--;
}</declaration>
	<template>
		<name>MergerV2</name>
		<parameter>const belt_t belt, const pos_t pos, const belt_t other</parameter>
		<declaration>void mergeBelts() {
    belts[belt][pos+1] = belts[other][0];
    belts[other][0] = 0;
}</declaration>
		<location id="id0" x="0" y="-59">
			<name x="-59" y="-75">start</name>
		</location>
		<location id="id1" x="239" y="-58">
			<name x="213" y="-92">waiting</name>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="331" y="-42">!belts[belt][pos+1]</label>
			<label kind="synchronisation" x="331" y="-25">tick_components?</label>
			<label kind="assignment" x="331" y="-8">mergeBelts()</label>
			<nail x="239" y="18"/>
			<nail x="323" y="18"/>
			<nail x="323" y="-58"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="69" y="-84">init_done?</label>
		</transition>
	</template>
	<template>
		<name>StationV2</name>
		<parameter>const station_t id</parameter>
		<declaration>clock x;

int processing_time() {
    return station_conf[id].processing_time;
}

belt_t input() {
    return station_conf[id].input;
}

belt_t output() {
    return station_conf[id].output;
}

pos_t length() {
    return belt_conf[output()].length;
}

void addLast() {
    belts[output()][length()-1] += 1;
}</declaration>
		<location id="id4" x="-1139" y="-374">
			<name x="-1156" y="-408">start</name>
		</location>
		<location id="id5" x="-841" y="-374">
			<name x="-867" y="-408">waiting</name>
		</location>
		<location id="id6" x="-841" y="-154">
			<name x="-884" y="-137">processing</name>
			<label kind="invariant" x="-1045" y="-187">x &lt;= processing_time()</label>
		</location>
		<location id="id7" x="-518" y="-153">
			<name x="-577" y="-136">processing_over</name>
		</location>
		<location id="id8" x="-519" y="-374">
			<name x="-570" y="-408">update_sensor</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-731" y="-450">free[id]!</label>
			<label kind="assignment" x="-731" y="-433">decrease(), 
addLast()</label>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-510" y="-289">!wait[output()]</label>
			<label kind="synchronisation" x="-501" y="-272">move[output()]?</label>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-782" y="-178">x &gt;= processing_time()</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-833" y="-297">belts[input()][0]</label>
			<label kind="synchronisation" x="-833" y="-280">tick_components?</label>
			<label kind="assignment" x="-833" y="-263">x = 0, increase(), 
belts[input()][0] = 0</label>
		</transition>
		<transition id="id13">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1062" y="-400">init_done?</label>
		</transition>
	</template>
	<template>
		<name>TailSensorV2</name>
		<parameter>const tail_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return tail_sensor_conf[id].belt;
}

pos_t pos() {
    return tail_sensor_conf[id].pos;
}

station_t station() {
    return tail_sensor_conf[id].station;
}

void update() {
    wait[belt()] = belts[belt()][pos()];
}</declaration>
		<location id="id14" x="-76" y="-76">
			<name x="-102" y="-110">start</name>
		</location>
		<location id="id15" x="-76" y="93">
			<name x="-59" y="68">working</name>
		</location>
		<init ref="id14"/>
		<transition id="id16">
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-34" y="195">move[belt()]?</label>
			<label kind="assignment" x="-34" y="229">update()</label>
			<nail x="-76" y="221"/>
			<nail x="102" y="221"/>
			<nail x="102" y="93"/>
		</transition>
		<transition id="id17">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-68" y="-17">init_done?</label>
			<label kind="assignment" x="-68" y="0">update()</label>
		</transition>
	</template>
	<template>
		<name>HeadSensor</name>
		<parameter>const head_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return head_sensor_conf[id].belt;
}

pos_t pos() {
    return head_sensor_conf[id].pos;
}

station_t station() {
    return head_sensor_conf[id].station;
}</declaration>
		<location id="id18" x="8" y="-25">
			<name x="-110" y="-34">station_free</name>
		</location>
		<location id="id19" x="433" y="-25">
		</location>
		<location id="id20" x="221" y="-25">
			<name x="187" y="-59">triggered</name>
		</location>
		<location id="id21" x="8" y="272">
			<name x="-17" y="289">start</name>
		</location>
		<init ref="id21"/>
		<transition id="id22">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="229" y="144">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="229" y="110">init_done?</label>
			<label kind="assignment" x="229" y="127">gate[belt()] = true</label>
			<nail x="221" y="272"/>
		</transition>
		<transition id="id23">
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="guard" x="17" y="144">!belts[belt()][pos()]</label>
			<label kind="synchronisation" x="17" y="110">init_done?</label>
			<label kind="assignment" x="17" y="127">gate[belt()] = true</label>
		</transition>
		<transition id="id24">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="263" y="-153">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="263" y="-127">free[station()]?</label>
			<label kind="assignment" x="263" y="-102">gate[belt()] = true</label>
			<nail x="331" y="-68"/>
		</transition>
		<transition id="id25">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="246" y="-17">move[belt()]?</label>
			<label kind="assignment" x="246" y="0">gate[belt()] = false</label>
		</transition>
		<transition id="id26">
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="25" y="-51">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="59" y="-25">move[belt()]?</label>
			<label kind="assignment" x="34" y="-8">gate[belt()] = false</label>
		</transition>
		<transition id="id27">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="127" y="-263">!belts[belt()][pos()]</label>
			<label kind="synchronisation" x="127" y="-246">free[station()]?</label>
			<label kind="assignment" x="127" y="-229">gate[belt()] = true</label>
			<nail x="433" y="-204"/>
			<nail x="8" y="-204"/>
		</transition>
	</template>
	<template>
		<name>FlowV2</name>
		<parameter>const belt_t belt, const pos_t pos, const belt_t other</parameter>
		<declaration>pos_t length() {
    return belt_conf[other].length;
}

void switchBelt() {
    if(!gate[belt]) {
        belts[belt][pos] = 0;
        belts[other][length()-1] += 1;
    }
}</declaration>
		<location id="id28" x="-246" y="-68">
			<name x="-305" y="-85">start</name>
		</location>
		<location id="id29" x="-34" y="-68">
			<name x="-76" y="-102">wait_piece</name>
		</location>
		<init ref="id28"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="76" y="-34">belts[belt][pos]</label>
			<label kind="synchronisation" x="76" y="-17">tick_components?</label>
			<nail x="-34" y="17"/>
			<nail x="59" y="17"/>
			<nail x="59" y="-68"/>
		</transition>
		<transition id="id31">
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-186" y="-93">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Belt</name>
		<parameter>const belt_t id</parameter>
		<declaration>pos_t head() {
    return belt_conf[id].head;
}

pos_t length() {
    return belt_conf[id].length;
}

// I need two methods, one that updates from the first segment to the head sensor and one that updates everything else
// this second method if the head is -1 needs to do nothing since the first method has already taken care of everything

// One belt to rule them all... We need to change the move_belt function: iteratote on all belts to update them
// Together with this change simplify the initializer... which can be merged with the Belt
// When the clock reach BELT_SPEED send the tick_components signal and a single, broadcast move_belt

void move_head() {
    int i;
    int limit = (head() == -1)?length():head();
    
    for (i = 1; i &lt; limit; i++) {
        if (belts[id][i-1] == 0) {
            belts[id][i-1] = belts[id][i];
            belts[id][i] = 0;
        }
    }
}

void move_tail() {
    int i;
    
    if (head() != -1) {
        for (i = head()+1; i &lt; length(); i++) {
            if (belts[id][i-1] == 0) {
                belts[id][i-1] = belts[id][i];
                belts[id][i] = 0;
            }
        }
    }
}


void move_belt() {
    move_head();
    
    if (gate[id]) {
        if (head() &gt; 0 &amp;&amp; belts[id][head()-1] == 0) {
            belts[id][head()-1] = belts[id][head()];
            belts[id][head()] = 0;
        }
    }
    
    move_tail();
}

/*
Old methods 

void pop() {
    belts[id][0] -= 1;
}

bool head_occupied() {
    return belts[id][0];
}

void add_last() {
    belts[id][length()-1] += 1;
}
*/</declaration>
		<location id="id32" x="501" y="-59">
			<name x="484" y="-93">start</name>
		</location>
		<location id="id33" x="280" y="-59">
		</location>
		<location id="id34" x="51" y="-59">
			<committed/>
		</location>
		<init ref="id32"/>
		<transition id="id35">
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="127" y="-212">move[id]!</label>
			<label kind="assignment" x="119" y="-195">move_belt()</label>
			<nail x="51" y="-170"/>
			<nail x="280" y="-170"/>
		</transition>
		<transition id="id36">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="144" y="-59">tick?</label>
		</transition>
		<transition id="id37">
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="348" y="-59">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>clock x;

void init_all() {
    int i, j;
    
    for (i = 0; i &lt; BELTS; i++) {
        if (belt_conf[i].head == -1) {
            for (j = 0; j &lt; belt_conf[i].pieces; j++) {
                belts[i][i] = 1;
            }
        }
        else {
            for (j = belt_conf[i].head; j &lt; belt_conf[i].pieces + belt_conf[i].head; j++) {
                belts[i][j] = 1;
            }
        }
        
        pieces_on_belt += belt_conf[i].pieces;
    }
    total_pieces = pieces_on_belt;
}

void update_count() {
    int i, j;
    int app = 0;
    
    for (i = 0; i &lt; BELTS; i++) {
        for(j = 0; j &lt; belt_conf[i].length;j++) {
            app += belts[i][j];
        }
    }
    
    pieces_on_belt = app;
}</declaration>
		<location id="id38" x="42" y="-42">
			<name x="0" y="-76">belt_clock</name>
			<label kind="invariant" x="-34" y="-93">x &lt;= BELT_SPEED</label>
		</location>
		<location id="id39" x="-136" y="-42">
			<name x="-170" y="-76">start</name>
			<committed/>
		</location>
		<location id="id40" x="42" y="195">
			<committed/>
		</location>
		<init ref="id39"/>
		<transition id="id41">
			<source ref="id40"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="272" y="42">tick!</label>
			<label kind="assignment" x="272" y="59">update_count(), x = 0</label>
			<nail x="263" y="195"/>
			<nail x="263" y="-42"/>
		</transition>
		<transition id="id42">
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="guard" x="51" y="42">x &gt;= BELT_SPEED</label>
			<label kind="synchronisation" x="51" y="59">tick_components!</label>
		</transition>
		<transition id="id43">
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-102" y="-17">init_done!</label>
			<label kind="assignment" x="-102" y="-42">init_all()</label>
		</transition>
	</template>
	<template>
		<name>HeadSensorV2</name>
		<parameter>const head_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return head_sensor_conf[id].belt;
}

pos_t pos() {
    return head_sensor_conf[id].pos;
}

station_t station() {
    return head_sensor_conf[id].station;
}</declaration>
		<location id="id44" x="161" y="-59">
		</location>
		<location id="id45" x="-93" y="-59">
			<name x="-195" y="-93">triggered</name>
		</location>
		<location id="id46" x="-323" y="-59">
			<name x="-348" y="-42">start</name>
		</location>
		<init ref="id46"/>
		<transition id="id47">
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-272" y="-51">init_done?</label>
			<label kind="assignment" x="-272" y="-34">gate[belt()] = true</label>
		</transition>
		<transition id="id48">
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-59" y="-187">free[station()]?</label>
			<label kind="assignment" x="-59" y="-170">gate[belt()] = true</label>
			<nail x="161" y="-136"/>
			<nail x="-93" y="-136"/>
		</transition>
		<transition id="id49">
			<source ref="id45"/>
			<target ref="id44"/>
			<label kind="guard" x="-51" y="-42">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="-51" y="-25">move[belt()]?</label>
			<label kind="assignment" x="-51" y="-8">gate[belt()] = false</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

Flow = FlowV2(2, 3, 3);
Merge = MergerV2(6, 4, 5);

// List one or more processes to be composed into a system.
//system Initializer, Belt, Station, Flow, Merge, HeadSensor, TailSensor;

system Initializer, Belt, StationV2, Flow, Merge, HeadSensorV2, TailSensorV2;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] (processing_pieces &lt;= STATIONS)</formula>
			<comment/>
		</query>
		<query>
			<formula>A[](forall(i : belt_t) forall(j : belt_pos_t) belts[i][j] &lt; 2)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-05-25 15:33:09 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i :  tail_sensor_t) (TailSensor(i).hold_station imply Station(TailSensor(i).station).waiting_queue))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-05-25 15:51:07 +0200">
			</result>
		</query>
	</queries>
</nta>
