<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int HEAD_SENSORS = 6;
const int TAIL_SENSORS = 5;
const int BELTS = 9;
const int STATIONS = 6;
const int MERGERS = 1;
const int FLOW_CONTROLLERS = 1;

const int DESTINATIONS = STATIONS + MERGERS + FLOW_CONTROLLERS;

const int BELT_SPEED = 1;
const int MAX_SLOTS = 32;

typedef int[0, MAX_SLOTS-1] belt_pos_t;
typedef int[0, HEAD_SENSORS-1] head_sensor_t;
typedef int[0, TAIL_SENSORS-1] tail_sensor_t;
typedef int[0, BELTS-1] belt_t;
typedef int[0, STATIONS-1] station_t;
typedef int[0, DESTINATIONS-1] dest_t;
typedef int[-1, MAX_SLOTS-1] pos_t;

typedef struct { 
    dest_t station;
    pos_t head, tail, length;
    int pieces; 
} belt_config_t;

typedef struct {
    int processing_time;
    belt_t belt;
    bool sensor;
    bool guard_sensor;
} station_config_t;

typedef struct {
    belt_t belt;
    pos_t pos;
    dest_t station;
} sensor_config_t;

belt_config_t belt_conf[BELTS] = {
    {0, 3, 14, 17, 12}, 
    {1, 3, 13, 20, 0},
    {6, 1, -1, 25, 0},
    {2, -1, -1, 2, 0},
    {4, 4, 13, 16, 0},
    {3, 3, 6, 8, 0},
    {7, -1, -1, 5, 0},
    {7, -1, -1, 4, 0},
    {5, 1, 3, 4, 0}
};

station_config_t station_conf[STATIONS] = {
    {2, 1, true, true},
    {4, 2, false, true},
    {2, 5, true, false},
    {6, 6, false, true},
    {1, 7, false, true},
    {3, 0, true, true}
};

sensor_config_t head_sensor_conf[HEAD_SENSORS] = {
  {0, 3, 0},
  {1, 3, 1},
  {2, 1, 2},
  {4, 4, 4},
  {5, 3, 3},
  {8, 1, 5}
};

sensor_config_t tail_sensor_conf[TAIL_SENSORS] = {
    {0, 14, 5},
    {1, 13, 0},
    {4, 13, 6},
    {5, 6, 2},
    {8, 3, 7}
};

int total_pieces = 0;
int processing_pieces = 0;
int pieces_on_belt = 0;



// signal for all the sensors placed on a belt
broadcast chan move[BELTS];
broadcast chan tick;
broadcast chan init_done;

// either we change the logic of the sensor to listen for the load signal or put another param to the station avoiding
chan load[BELTS];
chan push[DESTINATIONS];
chan free[DESTINATIONS];

int[0,1] belts[BELTS][MAX_SLOTS];
bool gate[BELTS];
bool wait[DESTINATIONS];
int FLOW_OUTPUTS[2] = {3, 4};

void increase() {
    processing_pieces++;
}

void decrease() {
    processing_pieces--;
}</declaration>
	<template>
		<name>StationV2</name>
		<parameter>station_t id</parameter>
		<declaration>clock x;
int processing_time;

belt_t belt;

void build() {
    processing_time = station_conf[id].processing_time;
    belt = station_conf[id].belt;
}</declaration>
		<location id="id0" x="-1139" y="-374">
			<name x="-1156" y="-408">start</name>
		</location>
		<location id="id1" x="-841" y="-374">
			<name x="-867" y="-408">waiting</name>
		</location>
		<location id="id2" x="-841" y="-154">
			<name x="-884" y="-137">processing</name>
			<label kind="invariant" x="-1037" y="-162">x &lt;= processing_time</label>
		</location>
		<location id="id3" x="-518" y="-153">
			<name x="-577" y="-136">processing_over</name>
		</location>
		<location id="id4" x="-519" y="-374">
			<name x="-570" y="-408">update_sensor</name>
			<committed/>
		</location>
		<location id="id5" x="-671" y="-374">
			<name x="-705" y="-408">load_belt</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id6">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-807" y="-365">load[belt]!</label>
			<label kind="assignment" x="-807" y="-340">decrease()</label>
		</transition>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-620" y="-365">free[id]!</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-501" y="-297">!wait[id]</label>
			<label kind="synchronisation" x="-501" y="-272">move[belt]?</label>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-782" y="-178">x &gt;= processing_time</label>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-833" y="-281">push[id]?</label>
			<label kind="assignment" x="-833" y="-255">x = 0, increase()</label>
		</transition>
		<transition id="id11">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-1062" y="-400">init_done?</label>
			<label kind="assignment" x="-1062" y="-366">build()</label>
		</transition>
	</template>
	<template>
		<name>TailSensorV2</name>
		<parameter>tail_sensor_t id</parameter>
		<declaration>belt_t belt;
pos_t pos;
dest_t station;

void build() {
    belt = tail_sensor_conf[id].belt;
    pos = tail_sensor_conf[id].pos;
    station = tail_sensor_conf[id].station;
}

void update() {
    wait[station] = belts[belt][pos];
}</declaration>
		<location id="id12" x="153" y="-76">
			<name x="136" y="-110">start</name>
		</location>
		<location id="id13" x="-76" y="-76">
			<name x="-110" y="-110">init_over</name>
			<committed/>
		</location>
		<location id="id14" x="-76" y="93">
			<name x="-59" y="68">working</name>
		</location>
		<init ref="id12"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-34" y="195">move[belt]?</label>
			<label kind="assignment" x="-34" y="229">update()</label>
			<nail x="-76" y="221"/>
			<nail x="102" y="221"/>
			<nail x="102" y="93"/>
		</transition>
		<transition id="id16">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="assignment" x="-68" y="0">update()</label>
		</transition>
		<transition id="id17">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="17" y="-101">init_done?</label>
			<label kind="assignment" x="17" y="-67">build()</label>
		</transition>
	</template>
	<template>
		<name>HeadSensor</name>
		<parameter>head_sensor_t id</parameter>
		<declaration>belt_t belt;
pos_t pos;
dest_t station;

void build() {
    belt = head_sensor_conf[id].belt;
    pos = head_sensor_conf[id].pos;
    station = head_sensor_conf[id].station;
}</declaration>
		<location id="id18" x="-263" y="272">
			<name x="-322" y="263">start</name>
		</location>
		<location id="id19" x="8" y="-25">
			<name x="-127" y="-59">station_free</name>
		</location>
		<location id="id20" x="433" y="-25">
			<name x="450" y="-51">station_busy</name>
		</location>
		<location id="id21" x="221" y="-25">
			<name x="187" y="-59">triggered</name>
		</location>
		<location id="id22" x="8" y="272">
			<name x="25" y="238">initialization</name>
			<committed/>
		</location>
		<init ref="id18"/>
		<transition id="id23">
			<source ref="id18"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-246" y="246">init_done?</label>
			<label kind="assignment" x="-246" y="280">build(), gate[belt] = true</label>
		</transition>
		<transition id="id24">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="238" y="170">belts[belt][pos]</label>
			<nail x="221" y="272"/>
		</transition>
		<transition id="id25">
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="guard" x="17" y="170">!belts[belt][pos]</label>
		</transition>
		<transition id="id26">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="263" y="-153">belts[belt][pos]</label>
			<label kind="synchronisation" x="263" y="-127">free[station]?</label>
			<label kind="assignment" x="263" y="-102">gate[belt] = true</label>
			<nail x="331" y="-68"/>
		</transition>
		<transition id="id27">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="280" y="-17">move[belt]?</label>
			<label kind="assignment" x="246" y="0">gate[belt] = false</label>
		</transition>
		<transition id="id28">
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="42" y="-51">belts[belt][pos]</label>
			<label kind="synchronisation" x="68" y="-17">move[belt]?</label>
		</transition>
		<transition id="id29">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="127" y="-263">!belts[belt][pos]</label>
			<label kind="synchronisation" x="127" y="-246">free[station]?</label>
			<label kind="assignment" x="127" y="-229">gate[belt] = true</label>
			<nail x="433" y="-204"/>
			<nail x="102" y="-204"/>
			<nail x="102" y="-102"/>
		</transition>
		<transition id="id30">
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="442" y="59">move[belt]?</label>
			<nail x="433" y="51"/>
			<nail x="544" y="51"/>
			<nail x="544" y="-25"/>
		</transition>
		<transition id="id31">
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-59" y="-136">free[station]?</label>
			<label kind="assignment" x="-59" y="-119">gate[belt] = true</label>
			<nail x="-34" y="-85"/>
			<nail x="51" y="-85"/>
		</transition>
		<transition id="id32">
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="guard" x="-195" y="0">!belts[belt][pos]</label>
			<label kind="synchronisation" x="-195" y="17">move[belt]?</label>
			<nail x="-68" y="-25"/>
			<nail x="-25" y="34"/>
		</transition>
	</template>
	<template>
		<name>FlowController</name>
		<parameter>dest_t id</parameter>
		<declaration>int counter;

void build() {
    counter = 0;
}

belt_t dest() {
    if (counter == 3) {
        return FLOW_OUTPUTS[1];
    }
       
    return FLOW_OUTPUTS[0];   
}

void update() {
    if (counter == 3) {
        counter = 0;
    }
    
    counter++;
}</declaration>
		<location id="id33" x="-298" y="-34">
			<name x="-357" y="-51">start</name>
		</location>
		<location id="id34" x="-86" y="-34">
			<name x="-119" y="-68">wait_piece</name>
		</location>
		<location id="id35" x="-85" y="170">
			<name x="-136" y="187">processing</name>
		</location>
		<location id="id36" x="161" y="170">
			<name x="178" y="161">offloading</name>
			<committed/>
		</location>
		<location id="id37" x="161" y="-34">
			<name x="127" y="-68">free_sensor</name>
			<committed/>
		</location>
		<init ref="id33"/>
		<transition id="id38">
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="170" y="51">load[dest()]!</label>
			<label kind="assignment" x="170" y="76">decrease()</label>
		</transition>
		<transition id="id39">
			<source ref="id37"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-8" y="-59">free[id]!</label>
		</transition>
		<transition id="id40">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-17" y="144">move[dest()]?</label>
		</transition>
		<transition id="id41">
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-76" y="51">push[id]?</label>
			<label kind="assignment" x="-76" y="76">update(), increase()</label>
		</transition>
		<transition id="id42">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-238" y="-59">init_done?</label>
			<label kind="assignment" x="-238" y="-25">build()</label>
		</transition>
	</template>
	<template>
		<name>Merger</name>
		<parameter>dest_t id, belt_t belt</parameter>
		<location id="id43" x="-264" y="-77">
			<name x="-323" y="-93">start</name>
		</location>
		<location id="id44" x="-25" y="-76">
			<name x="-51" y="-110">waiting</name>
		</location>
		<location id="id45" x="-25" y="161">
			<name x="-68" y="178">processing</name>
		</location>
		<location id="id46" x="246" y="161">
			<name x="204" y="178">offloading</name>
			<committed/>
		</location>
		<init ref="id43"/>
		<transition id="id47">
			<source ref="id46"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="110" y="17">load[belt]!</label>
			<label kind="assignment" x="161" y="51">decrease()</label>
		</transition>
		<transition id="id48">
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="59" y="136">move[belt]?</label>
		</transition>
		<transition id="id49">
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-17" y="42">push[id]?</label>
			<label kind="assignment" x="-17" y="76">increase()</label>
		</transition>
		<transition id="id50">
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-195" y="-102">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Belt</name>
		<parameter>belt_t id</parameter>
		<declaration>pos_t head;
pos_t tail;
pos_t length;
dest_t station;

void build() {
    station = belt_conf[id].station;
    head = belt_conf[id].head;
    tail = belt_conf[id].tail;
    length = belt_conf[id].length;
}

// I need two methods, one that updates from the first segment to the head sensor and one that updates everything else
// this second method if the head is -1 needs to do nothing since the first method has already taken care of everything
void move_head() {
    int i;
    int limit = (head == -1)?length:head;
    
    for (i = 1; i &lt; limit; i++) {
        if (belts[id][i-1] == 0) {
            belts[id][i-1] = belts[id][i];
            belts[id][i] = 0;
        }
    }
}

void move_tail() {
    int i;
    
    if (head != -1) {
        for (i = head+1; i &lt; length; i++) {
            if (belts[id][i-1] == 0) {
                belts[id][i-1] = belts[id][i];
                belts[id][i] = 0;
            }
        }
    }
}


void move_belt() {
    move_head();
    
    if (gate[id]) {
        if (head &gt; 0 &amp;&amp; belts[id][head-1] == 0) {
            belts[id][head-1] = belts[id][head];
            belts[id][head] = 0;
        }
    }
    
    move_tail();
}

void pop() {
    belts[id][0] -= 1;
}

bool head_occupied() {
    return belts[id][0];
}

void add_last() {
    belts[id][length-1] += 1;
}</declaration>
		<location id="id51" x="467" y="-152">
			<name x="450" y="-186">start</name>
		</location>
		<location id="id52" x="280" y="-59">
			<name x="187" y="-84">gate_open</name>
		</location>
		<location id="id53" x="51" y="-59">
			<name x="-17" y="-68">moving</name>
			<committed/>
		</location>
		<location id="id54" x="51" y="-229">
			<name x="-17" y="-263">loading_station</name>
			<committed/>
		</location>
		<init ref="id51"/>
		<transition id="id55">
			<source ref="id54"/>
			<target ref="id53"/>
			<label kind="guard" x="-161" y="-212">head == 0 &amp;&amp; !gate[id]</label>
			<label kind="assignment" x="-161" y="-187">move_belt()</label>
			<nail x="-8" y="-144"/>
		</transition>
		<transition id="id56">
			<source ref="id54"/>
			<target ref="id53"/>
			<label kind="guard" x="59" y="-187">head != 0 || (head == 0 &amp;&amp; gate[id])</label>
			<label kind="synchronisation" x="59" y="-170">push[station]!</label>
			<label kind="assignment" x="59" y="-153">pop(), move_belt()</label>
		</transition>
		<transition id="id57">
			<source ref="id52"/>
			<target ref="id54"/>
			<label kind="guard" x="127" y="-272">head_occupied()</label>
			<label kind="synchronisation" x="127" y="-255">tick?</label>
			<nail x="280" y="-229"/>
			<nail x="187" y="-229"/>
		</transition>
		<transition id="id58">
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="324" y="-169">init_done?</label>
			<label kind="assignment" x="324" y="-152">build()</label>
			<nail x="306" y="-152"/>
		</transition>
		<transition id="id59">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="guard" x="-93" y="-34">!head_occupied()</label>
			<label kind="synchronisation" x="-93" y="-17">tick?</label>
			<label kind="assignment" x="-93" y="0">move_belt()</label>
			<nail x="178" y="52"/>
			<nail x="51" y="52"/>
		</transition>
		<transition id="id60">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="85" y="-85">move[id]!</label>
		</transition>
		<transition id="id61">
			<source ref="id52"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="238" y="60">load[id]?</label>
			<label kind="assignment" x="238" y="77">add_last()</label>
			<nail x="331" y="52"/>
			<nail x="229" y="52"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>clock x;

void init_all() {
    int i, j;
    
    for (i = 0; i &lt; BELTS; i++) {
        if (belt_conf[i].head == -1) {
            for (j = 0; j &lt; belt_conf[i].pieces; j++) {
                belts[i][i] = 1;
            }
        }
        else {
            for (j = belt_conf[i].head; j &lt; belt_conf[i].pieces + belt_conf[i].head; j++) {
                belts[i][j] = 1;
            }
        }
        
        pieces_on_belt += belt_conf[i].pieces;
    }
    total_pieces = pieces_on_belt;
}

void update_count() {
    int i, j;
    int app = 0;
    
    for (i = 0; i &lt; BELTS; i++) {
        for(j = 0; j &lt; belt_conf[i].length;j++) {
            app += belts[i][j];
        }
    }
    
    pieces_on_belt = app;
}</declaration>
		<location id="id62" x="-323" y="-42">
			<name x="-382" y="-76">starting_point</name>
			<committed/>
		</location>
		<location id="id63" x="42" y="-42">
			<name x="0" y="-76">belt_clock</name>
			<label kind="invariant" x="-34" y="-93">x &lt;= BELT_SPEED</label>
		</location>
		<location id="id64" x="-136" y="-42">
			<name x="-170" y="-76">init_over</name>
			<committed/>
		</location>
		<init ref="id62"/>
		<transition id="id65">
			<source ref="id64"/>
			<target ref="id63"/>
			<label kind="synchronisation" x="-93" y="-42">init_done!</label>
		</transition>
		<transition id="id66">
			<source ref="id62"/>
			<target ref="id64"/>
			<label kind="assignment" x="-272" y="-42">init_all()</label>
		</transition>
		<transition id="id67">
			<source ref="id63"/>
			<target ref="id63"/>
			<label kind="guard" x="212" y="-8">x == BELT_SPEED</label>
			<label kind="synchronisation" x="212" y="17">tick!</label>
			<label kind="assignment" x="212" y="42">x = 0, update_count()</label>
			<nail x="41" y="85"/>
			<nail x="203" y="85"/>
			<nail x="203" y="-42"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

Flow = FlowController(6);
Merge = Merger(7,8);

// List one or more processes to be composed into a system.
//system Initializer, Belt, Station, Flow, Merge, HeadSensor, TailSensor;

system Initializer, Belt, StationV2, Flow, Merge, HeadSensor, TailSensorV2;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] (processing_pieces &lt;= STATIONS + MERGERS + FLOW_CONTROLLERS)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-05-25 23:43:44 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i : belt_t) forall(j : belt_pos_t) belts[i][j] &lt; 2)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-05-25 15:33:09 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i :  tail_sensor_t) (TailSensor(i).hold_station imply Station(TailSensor(i).station).waiting_queue))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-05-25 15:51:07 +0200">
			</result>
		</query>
	</queries>
</nta>
