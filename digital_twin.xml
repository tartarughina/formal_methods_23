<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int HEAD_SENSORS = 6;
const int TAIL_SENSORS = 5;
const int BELTS = 7;
const int STATIONS = 6;
const int MAX_SLOTS = 29;
const int CONFIGS = 3;

typedef int[0, MAX_SLOTS-1] belt_pos_t;
typedef int[0, HEAD_SENSORS-1] head_sensor_t;
typedef int[0, TAIL_SENSORS-1] tail_sensor_t;
typedef int[0, BELTS-1] belt_t;
typedef int[0, STATIONS-1] station_t;
typedef int[-1, MAX_SLOTS] pos_t;

typedef struct { 
    pos_t head, tail, length;
    int pieces;
} belt_config_t;

typedef struct {
    int processing_time;
    belt_t input, output;
} station_config_t;

typedef struct {
    belt_t belt;
    pos_t pos;
} sensor_config_t;

broadcast chan move, tick, tick_components, init_done;
broadcast chan free[STATIONS];
 
int[0,2] belts[BELTS][MAX_SLOTS];
bool gate[BELTS];
bool wait[BELTS];

// POLICY SCHEDULE
// 0 --&gt; Go to the free station
// 1 --&gt; Keep flowing, do nothing
// 2 --&gt; Switch every time
// 3 --&gt; Round-robin

const int POLICY_SCHEDULE = 0;

// CONFIGURATIONS 

const int CONFIG = 0;

const int BELT_SPEEDS[CONFIGS] = {1, 6, 3};
const int BELT_SPEED = BELT_SPEEDS[CONFIG];

// head position, tail position, length, pieces to be loaded
const belt_config_t belt_conf[CONFIGS][BELTS] = { 
{
    {3, 14, 17, 12}, 
    {3, 13, 20, 0},
    {2, -1, 29, 0},
    {4, 13, 15, 0},
    {3, 6, 8, 0},
    {-1, -1, 5, 0},
    {1, 3, 10, 0}
},
{
    {3, 14, 17, 12}, 
    {3, 13, 20, 0},
    {2, -1, 29, 0},
    {4, 13, 15, 0},
    {3, 6, 8, 0},
    {-1, -1, 5, 0},
    {1, 3, 10, 0}
},
{
    {3, 14, 17, 5}, 
    {3, 13, 20, 0},
    {2, -1, 29, 0},
    {4, 13, 15, 0},
    {3, 6, 8, 0},
    {-1, -1, 5, 0},
    {1, 3, 10, 0}
}};

// processing time, input belt, output belt
const station_config_t station_conf[CONFIGS][STATIONS] = {
{
    {6, 0, 1},
    {6, 1, 2},
    {3, 2, 4},
    {3, 4, 5},
    {6, 3, 6},
    {6, 6, 0}
},
{
    {2, 0, 1},
    {2, 1, 2},
    {1, 2, 4},
    {1, 4, 5},
    {2, 3, 6},
    {2, 6, 0}
}, 
{
    {3, 0, 1},
    {5, 1, 2},
    {4, 2, 4},
    {4, 4, 5},
    {8, 3, 6},
    {6, 6, 0}
}};

// belt, position on the belt
const sensor_config_t head_sensor_conf[CONFIGS][HEAD_SENSORS] = {
{
  {0, 3},
  {1, 3},
  {2, 2},
  {4, 3},
  {3, 3},
  {6, 1}
},
{
  {0, 3},
  {1, 3},
  {2, 2},
  {4, 3},
  {3, 3},
  {6, 1}
},
{
  {0, 3},
  {1, 3},
  {2, 2},
  {4, 3},
  {3, 3},
  {6, 1}
}};

// belt, position on the belt
const sensor_config_t tail_sensor_conf[CONFIGS][TAIL_SENSORS] = {
{
    {0, 14},
    {1, 13},
    {3, 12},
    {4, 6},
    {6, 3}
},
{
    {0, 14},
    {1, 13},
    {3, 12},
    {4, 6},
    {6, 3}
}, 
{
    {0, 14},
    {1, 13},
    {3, 12},
    {4, 6},
    {6, 3}
}};

// TOTAL PIECES
// sum(k : belt_t) belt_conf[k].pieces
// int total_pieces = 0;

// PIECES BEING PROCESSED
// sum(x : station_t) not StationV2(x).waiting
//int processing_pieces = 0;

// PIECES ON BELT
// sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j]
//int pieces_on_belt = 0;
</declaration>
	<template>
		<name>Merger</name>
		<parameter>const belt_t belt, const pos_t pos, const belt_t other</parameter>
		<declaration>void mergeBelts() {
    belts[belt][pos+1] = belts[other][0];
    belts[other][0]--;
}</declaration>
		<location id="id0" x="238" y="-59">
			<name x="212" y="-93">waiting</name>
		</location>
		<init ref="id0"/>
		<transition id="id1">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="330" y="-43">!belts[belt][pos+1] &amp;&amp; belts[other][0]</label>
			<label kind="synchronisation" x="330" y="-26">tick_components?</label>
			<label kind="assignment" x="330" y="-9">mergeBelts()</label>
			<nail x="238" y="17"/>
			<nail x="322" y="17"/>
			<nail x="322" y="-59"/>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const station_t id</parameter>
		<declaration>clock x;

int processing_time() {
    return station_conf[CONFIG][id].processing_time;
}

belt_t input() {
    return station_conf[CONFIG][id].input;
}

belt_t output() {
    return station_conf[CONFIG][id].output;
}

pos_t length() {
    return belt_conf[CONFIG][output()].length;
}

void offload() {
    //decrease();
    
    belts[output()][length()-1]++;
}

void load() {
    //increase();
    
    belts[input()][0]--;
}</declaration>
		<location id="id2" x="-841" y="-374">
			<name x="-867" y="-408">waiting</name>
		</location>
		<location id="id3" x="-841" y="-154">
			<name x="-884" y="-137">processing</name>
			<label kind="invariant" x="-1045" y="-187">x &lt;= processing_time()</label>
		</location>
		<location id="id4" x="-518" y="-153">
			<name x="-577" y="-136">processing_over</name>
		</location>
		<location id="id5" x="-519" y="-374">
			<name x="-570" y="-408">update_sensor</name>
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id6">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-731" y="-425">free[id]!</label>
			<label kind="assignment" x="-731" y="-408">offload()</label>
		</transition>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-510" y="-289">!wait[output()]</label>
			<label kind="synchronisation" x="-510" y="-272">move?</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-782" y="-178">x &gt;= processing_time()</label>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-833" y="-297">belts[input()][0]</label>
			<label kind="synchronisation" x="-833" y="-280">tick_components?</label>
			<label kind="assignment" x="-833" y="-263">x = 0, load()</label>
		</transition>
	</template>
	<template>
		<name>TailSensor</name>
		<parameter>const tail_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return tail_sensor_conf[CONFIG][id].belt;
}

pos_t pos() {
    return tail_sensor_conf[CONFIG][id].pos;
}

void update() {
    wait[belt()] = belts[belt()][pos()];
}</declaration>
		<location id="id10" x="-76" y="-76">
			<name x="-102" y="-110">start</name>
		</location>
		<location id="id11" x="-76" y="93">
			<name x="-59" y="68">queueing</name>
		</location>
		<location id="id12" x="187" y="221">
			<name x="212" y="212">queue_full</name>
		</location>
		<init ref="id10"/>
		<transition id="id13">
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="195" y="93">!belts[belt()][pos()]</label>
			<label kind="synchronisation" x="203" y="110">move?</label>
			<label kind="assignment" x="203" y="127">update()</label>
			<nail x="187" y="93"/>
		</transition>
		<transition id="id14">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-76" y="229">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="-76" y="246">move?</label>
			<label kind="assignment" x="-76" y="263">update()</label>
			<nail x="-76" y="221"/>
		</transition>
		<transition id="id15">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-68" y="-17">init_done?</label>
			<label kind="assignment" x="-68" y="0">update()</label>
		</transition>
	</template>
	<template>
		<name>Flow</name>
		<parameter>const belt_t belt, const pos_t pos, const belt_t other, const int policy</parameter>
		<declaration>pos_t length() {
    return belt_conf[CONFIG][other].length;
}

bool branch = false;

// POLICY SCHEDULE
// 0 --&gt; Go to the free station
// 1 --&gt; Keep flowing, do nothing
// 2 --&gt; Switch every time
// 3 --&gt; Round-robin

void swap() {
    if(!wait[other]) {
        belts[belt][pos]--;
        belts[other][length()-1]++;
    }
}

void switchBelt() {
    if (policy == 1) { return; }
    
    if (policy == 0 &amp;&amp; !gate[belt]) {
        swap();
    } else if (policy == 2){
            swap();
        }
        else {
            if (branch) {
                swap();
            }
            
            branch = !branch;
        }
}</declaration>
		<location id="id16" x="-34" y="-68">
			<name x="-68" y="-102">wait_piece</name>
		</location>
		<init ref="id16"/>
		<transition id="id17">
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="guard" x="76" y="-34">belts[belt][pos]</label>
			<label kind="synchronisation" x="76" y="-17">tick_components?</label>
			<label kind="assignment" x="76" y="0">switchBelt()</label>
			<nail x="-34" y="17"/>
			<nail x="59" y="17"/>
			<nail x="59" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Belt</name>
		<declaration>clock x;

pos_t head(belt_t id) {
    return belt_conf[CONFIG][id].head;
}

pos_t length(belt_t id) {
    return belt_conf[CONFIG][id].length;
}

pos_t tail(belt_t id) {
    return belt_conf[CONFIG][id].tail;
}

int max_queue(belt_t id) {
    pos_t head = (head(id) == -1) ? 0 : head(id);
    pos_t tail = (tail(id) == -1) ? length(id) : tail(id);

    return tail-head + 1;
}

// One belt to rule them all... We need to change the move_belt function: iteratote on all belts to update them
// When the clock reach BELT_SPEED send the tick_components signal and a single, broadcast move_belt

void move_head(belt_t id) {
    int i;
    int limit = (head(id) == -1)?length(id):head(id);
    
    for (i = 1; i &lt; limit; i++) {
        if (belts[id][i-1] == 0) {
            belts[id][i-1] = belts[id][i];
            belts[id][i] = 0;
        }
    }
}

void move_tail(belt_t id) {
    int i;
    
    if (head(id) != -1) {
        for (i = head(id)+1; i &lt; length(id); i++) {
            if (belts[id][i-1] == 0) {
                belts[id][i-1] = belts[id][i];
                belts[id][i] = 0;
            }
        }
    }
}

void move_gate(belt_t id) {
    if (gate[id]) {
        if (head(id) &gt; 0 &amp;&amp; belts[id][head(id)-1] == 0) {
            belts[id][head(id)-1] = belts[id][head(id)];
            belts[id][head(id)] = 0;
        }
    }
}

void move_belt() {

    for(i : belt_t) {
        move_head(i);
        
        move_gate(i);
    
        move_tail(i);
    }
}</declaration>
		<location id="id18" x="501" y="-59">
			<name x="484" y="-93">start</name>
		</location>
		<location id="id19" x="280" y="-59">
			<label kind="invariant" x="331" y="-42">x &lt;=BELT_SPEED</label>
		</location>
		<location id="id20" x="51" y="-59">
			<committed/>
		</location>
		<init ref="id18"/>
		<transition id="id21">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="110" y="-238">move!</label>
			<label kind="assignment" x="110" y="-221">move_belt(),
x = 0</label>
			<nail x="51" y="-170"/>
			<nail x="280" y="-170"/>
		</transition>
		<transition id="id22">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="119" y="-51">x&gt;=BELT_SPEED</label>
			<label kind="synchronisation" x="110" y="-34">tick_components!</label>
		</transition>
		<transition id="id23">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="348" y="-59">init_done?</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>void init_all() {
    int i, j;
    
    for (i = 0; i &lt; BELTS; i++) {
        if (belt_conf[CONFIG][i].head == -1) {
            for (j = 0; j &lt; belt_conf[CONFIG][i].pieces; j++) {
                belts[i][i] = 1;
            }
        }
        else {
            for (j = belt_conf[CONFIG][i].head; j &lt; belt_conf[CONFIG][i].pieces + belt_conf[CONFIG][i].head; j++) {
                belts[i][j] = 1;
            }
        }
    }
}

</declaration>
		<location id="id24" x="42" y="-42">
			<name x="0" y="-76">init_over</name>
		</location>
		<location id="id25" x="-136" y="-42">
			<name x="-170" y="-76">start</name>
			<committed/>
		</location>
		<init ref="id25"/>
		<transition id="id26">
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-93" y="-17">init_done!</label>
			<label kind="assignment" x="-93" y="-34">init_all()</label>
		</transition>
	</template>
	<template>
		<name>HeadSensor</name>
		<parameter>const head_sensor_t id</parameter>
		<declaration>belt_t belt() {
    return head_sensor_conf[CONFIG][id].belt;
}

pos_t pos() {
    return head_sensor_conf[CONFIG][id].pos;
}
</declaration>
		<location id="id27" x="161" y="-59">
		</location>
		<location id="id28" x="-93" y="-59">
			<name x="-136" y="-42">triggered</name>
		</location>
		<location id="id29" x="-323" y="-59">
			<name x="-348" y="-42">start</name>
		</location>
		<init ref="id29"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-272" y="-102">init_done?</label>
			<label kind="assignment" x="-272" y="-85">gate[belt()] = true</label>
		</transition>
		<transition id="id31">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-59" y="-187">free[id]?</label>
			<label kind="assignment" x="-59" y="-170">gate[belt()] = true</label>
			<nail x="161" y="-136"/>
			<nail x="-93" y="-136"/>
		</transition>
		<transition id="id32">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-42" y="-51">belts[belt()][pos()]</label>
			<label kind="synchronisation" x="-42" y="-34">move?</label>
			<label kind="assignment" x="-42" y="-17">gate[belt()] = false</label>
		</transition>
	</template>
	<system>// POLICY SCHEDULE
// 0 --&gt; Go to the free station
// 1 --&gt; Keep flowing, do nothing
// 2 --&gt; Switch every time
// 3 --&gt; Round-robin

FlowController = Flow(2, 3, 3, /*policy schedule*/3);
Merge = Merger(6, 4, 5);

system Initializer, Belt, Station, FlowController, Merge, HeadSensor, TailSensor;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Always for all paths the model doesn't incur into deadlock state</comment>
		</query>
		<query>
			<formula>A[] (Initializer.init_over imply (sum(x : station_t) not Station(x).waiting) + (sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j]) == sum(k : belt_t) belt_conf[CONFIG][k].pieces)</formula>
			<comment>Always for all paths, once initilized, the pieces in the system remain the same,this also verify that two pieces never overlap or a station never holds more than one piece</comment>
			<result outcome="success" type="quality" timestamp="2023-07-10 18:12:14 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (Initializer.init_over imply forall(i : belt_t) forall(j : belt_pos_t) 0 &lt;= belts[i][j] &lt; 2)</formula>
			<comment>Always for all paths it never happens that in the belt two pieces overlap</comment>
			<result outcome="success" type="quality" timestamp="2023-06-14 13:35:09 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (Initializer.init_over imply forall(i :  belt_t) ((sum(j : belt_pos_t) belts[i][j])&lt;=Belt.max_queue(i)))</formula>
			<comment>Always for all paths the pieces on the belts are within the queue length once the system in initialized</comment>
			<result outcome="success" type="quality" timestamp="2023-07-10 18:20:48 +0200">
			</result>
		</query>
		<query>
			<formula>A[] (Initializer.init_over imply forall(i : station_t) not Station(i).waiting imply (sum(j: belt_pos_t) (j &lt; HeadSensor(i).pos())?belts[Station(i).input()][j]:0) == 0)
</formula>
			<comment>For all paths when a station is processing the slot before it is always free of pieces aka the station never process more than one piece at a time</comment>
			<result outcome="success" type="quality" timestamp="2023-07-10 18:20:45 +0200">
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=1000] {
sum(k : belt_t) belt_conf[CONFIG][k].pieces,
sum(i : belt_t ) sum(j : belt_pos_t) belts[i][j],
sum(x : station_t) not Station(x).waiting
}</formula>
			<comment>In order:
- total pieces in the system
- pieces on belt
- pieces being processed</comment>
			<result outcome="success" type="quality" timestamp="2023-07-17 14:32:24 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="sum (k:(const (label belt_t:(range (int) &quot;0&quot; &quot;BELTS - 1&quot;)))) belt_conf[CONFIG][k].pieces" type="l" color="0xff0000" encoding="csv">0.0,12.0
1000.000002,12.0
					</series>
					<series title="sum (i:(const (label belt_t:(range (int) &quot;0&quot; &quot;BELTS - 1&quot;)))) sum (j:(const (label belt_pos_t:(range (int) &quot;0&quot; &quot;MAX_SLOTS - 1&quot;)))) belts[i][j]" type="l" color="0x00ff00" encoding="csv">0.0,0.0
0.0,12.0
4.0,12.0
4.0,11.0
10.0,11.0
10.0,12.0
14.0,12.0
14.0,11.0
20.0,11.0
20.0,12.0
24.0,12.0
24.0,11.0
30.0,11.0
30.0,10.0
30.0,11.0
34.0,11.0
34.0,10.0
36.0,10.0
36.0,11.0
40.0,11.0
40.0,10.0
40.0,11.0
44.0,11.0
44.0,10.0
46.0,10.0
46.0,11.0
50.0,11.0
50.0,10.0
50.0,11.0
54.0,11.0
54.0,10.0
56.0,10.0
56.0,11.0
60.0,11.0
60.0,10.0
61.0,10.0
61.0,11.0
65.0,11.0
65.0,9.0
66.0,9.0
66.0,10.0
68.0,10.0
68.0,11.0
70.0,11.0
70.0,10.0
72.0,10.0
72.0,11.0
76.0,11.0
76.0,9.0
76.0,10.0
79.0,10.0
79.0,11.0
81.0,11.0
81.0,10.0
82.0,10.0
82.0,11.0
85.0,11.0
85.0,10.0
86.0,10.0
86.0,8.0
88.0,8.0
88.0,10.0
89.0,10.0
89.0,9.0
92.0,9.0
92.0,8.0
92.0,9.0
93.0,9.0
93.0,10.0
96.0,10.0
96.0,9.0
96.0,10.0
97.0,10.0
97.0,9.0
99.0,9.0
99.0,10.0
100.0,10.0
100.0,11.0
102.0,11.0
102.0,10.0
103.0,10.0
103.0,9.0
104.0,9.0
104.0,10.0
105.0,10.0
105.0,9.0
106.0,9.0
106.0,8.0
108.0,8.0
108.0,7.0
108.0,8.0
108.0,9.0
109.0,9.0
109.0,10.0
110.0,10.0
110.0,9.0
112.0,9.0
112.0,10.0
113.0,10.0
113.0,9.0
114.0,9.0
114.0,10.0
116.0,10.0
116.0,9.0
117.0,9.0
117.0,10.0
118.0,10.0
118.0,9.0
119.0,9.0
119.0,11.0
122.0,11.0
122.0,10.0
124.0,10.0
124.0,9.0
124.0,10.0
128.0,10.0
128.0,7.0
128.0,8.0
130.0,8.0
130.0,7.0
130.0,8.0
132.0,8.0
132.0,9.0
134.0,9.0
134.0,8.0
134.0,9.0
135.0,9.0
135.0,10.0
136.0,10.0
136.0,11.0
138.0,11.0
138.0,10.0
140.0,10.0
140.0,9.0
141.0,9.0
141.0,10.0
144.0,10.0
144.0,11.0
145.0,11.0
145.0,9.0
145.0,10.0
148.0,10.0
148.0,9.0
149.0,9.0
149.0,7.0
151.0,7.0
151.0,10.0
154.0,10.0
154.0,9.0
155.0,9.0
155.0,8.0
155.0,9.0
155.0,10.0
159.0,10.0
159.0,8.0
160.0,8.0
160.0,9.0
161.0,9.0
161.0,10.0
163.0,10.0
163.0,11.0
165.0,11.0
165.0,9.0
165.0,10.0
169.0,10.0
169.0,9.0
170.0,9.0
170.0,7.0
172.0,7.0
172.0,9.0
173.0,9.0
173.0,10.0
174.0,10.0
174.0,9.0
175.0,9.0
175.0,10.0
176.0,10.0
176.0,9.0
176.0,10.0
179.0,10.0
179.0,9.0
180.0,9.0
180.0,10.0
181.0,10.0
181.0,9.0
183.0,9.0
183.0,10.0
184.0,10.0
184.0,11.0
185.0,11.0
185.0,12.0
186.0,12.0
186.0,11.0
187.0,11.0
187.0,10.0
189.0,10.0
189.0,9.0
190.0,9.0
190.0,8.0
191.0,8.0
191.0,7.0
192.0,7.0
192.0,8.0
193.0,8.0
193.0,9.0
194.0,9.0
194.0,8.0
194.0,9.0
195.0,9.0
195.0,10.0
197.0,10.0
197.0,9.0
198.0,9.0
198.0,10.0
199.0,10.0
199.0,9.0
200.0,9.0
200.0,10.0
202.0,10.0
202.0,9.0
204.0,9.0
204.0,10.0
205.0,10.0
205.0,12.0
208.0,12.0
208.0,10.0
209.0,10.0
209.0,9.0
212.0,9.0
212.0,7.0
214.0,7.0
214.0,9.0
215.0,9.0
215.0,11.0
216.0,11.0
216.0,10.0
218.0,10.0
218.0,9.0
218.0,10.0
219.0,10.0
219.0,9.0
222.0,9.0
222.0,10.0
223.0,10.0
223.0,9.0
224.0,9.0
224.0,10.0
225.0,10.0
225.0,11.0
227.0,11.0
227.0,12.0
228.0,12.0
228.0,10.0
229.0,10.0
229.0,9.0
233.0,9.0
233.0,7.0
234.0,7.0
234.0,9.0
235.0,9.0
235.0,10.0
236.0,10.0
236.0,11.0
237.0,11.0
237.0,10.0
238.0,10.0
238.0,9.0
239.0,9.0
239.0,8.0
239.0,9.0
243.0,9.0
243.0,10.0
244.0,10.0
244.0,9.0
244.0,10.0
245.0,10.0
245.0,11.0
248.0,11.0
248.0,10.0
248.0,11.0
249.0,11.0
249.0,9.0
253.0,9.0
253.0,8.0
254.0,8.0
254.0,7.0
254.0,8.0
255.0,8.0
255.0,9.0
256.0,9.0
256.0,11.0
258.0,11.0
258.0,9.0
260.0,9.0
260.0,8.0
260.0,9.0
264.0,9.0
264.0,8.0
265.0,8.0
265.0,10.0
267.0,10.0
267.0,11.0
268.0,11.0
268.0,12.0
269.0,12.0
269.0,11.0
270.0,11.0
270.0,10.0
271.0,10.0
271.0,9.0
273.0,9.0
273.0,8.0
274.0,8.0
274.0,7.0
275.0,7.0
275.0,8.0
277.0,8.0
277.0,11.0
279.0,11.0
279.0,9.0
280.0,9.0
280.0,10.0
281.0,10.0
281.0,9.0
285.0,9.0
285.0,8.0
285.0,9.0
286.0,9.0
286.0,10.0
287.0,10.0
287.0,11.0
288.0,11.0
288.0,12.0
289.0,12.0
289.0,11.0
290.0,11.0
290.0,10.0
291.0,10.0
291.0,9.0
294.0,9.0
294.0,7.0
296.0,7.0
296.0,9.0
298.0,9.0
298.0,8.0
298.0,9.0
298.0,10.0
300.0,10.0
300.0,9.0
301.0,9.0
301.0,10.0
302.0,10.0
302.0,9.0
304.0,9.0
304.0,10.0
306.0,10.0
306.0,9.0
307.0,9.0
307.0,10.0
308.0,10.0
308.0,11.0
310.0,11.0
310.0,12.0
311.0,12.0
311.0,10.0
312.0,10.0
312.0,9.0
314.0,9.0
314.0,8.0
315.0,8.0
315.0,7.0
317.0,7.0
317.0,8.0
318.0,8.0
318.0,10.0
319.0,10.0
319.0,11.0
320.0,11.0
320.0,10.0
321.0,10.0
321.0,9.0
321.0,10.0
323.0,10.0
323.0,9.0
326.0,9.0
326.0,8.0
327.0,8.0
327.0,9.0
328.0,9.0
328.0,10.0
329.0,10.0
329.0,11.0
330.0,11.0
330.0,12.0
331.0,12.0
331.0,11.0
332.0,11.0
332.0,10.0
333.0,10.0
333.0,9.0
336.0,9.0
336.0,7.0
337.0,7.0
337.0,8.0
338.0,8.0
338.0,9.0
340.0,9.0
340.0,8.0
340.0,9.0
340.0,10.0
342.0,10.0
342.0,9.0
342.0,10.0
344.0,10.0
344.0,9.0
346.0,9.0
346.0,10.0
348.0,10.0
348.0,9.0
348.0,10.0
350.0,10.0
350.0,11.0
352.0,11.0
352.0,9.0
352.0,10.0
354.0,10.0
354.0,9.0
357.0,9.0
357.0,7.0
358.0,7.0
358.0,9.0
360.0,9.0
360.0,10.0
361.0,10.0
361.0,11.0
362.0,11.0
362.0,9.0
363.0,9.0
363.0,10.0
364.0,10.0
364.0,9.0
368.0,9.0
368.0,10.0
369.0,10.0
369.0,9.0
369.0,10.0
370.0,10.0
370.0,11.0
372.0,11.0
372.0,10.0
372.0,11.0
373.0,11.0
373.0,10.0
374.0,10.0
374.0,9.0
377.0,9.0
377.0,8.0
378.0,8.0
378.0,7.0
379.0,7.0
379.0,8.0
380.0,8.0
380.0,10.0
381.0,10.0
381.0,11.0
382.0,11.0
382.0,10.0
383.0,10.0
383.0,9.0
385.0,9.0
385.0,8.0
385.0,9.0
388.0,9.0
388.0,8.0
389.0,8.0
389.0,9.0
390.0,9.0
390.0,10.0
391.0,10.0
391.0,11.0
392.0,11.0
392.0,12.0
394.0,12.0
394.0,11.0
395.0,11.0
395.0,10.0
396.0,10.0
396.0,9.0
397.0,9.0
397.0,8.0
398.0,8.0
398.0,7.0
400.0,7.0
400.0,8.0
401.0,8.0
401.0,9.0
402.0,9.0
402.0,10.0
403.0,10.0
403.0,11.0
404.0,11.0
404.0,9.0
405.0,9.0
405.0,10.0
407.0,10.0
407.0,9.0
409.0,9.0
409.0,8.0
410.0,8.0
410.0,9.0
411.0,9.0
411.0,10.0
413.0,10.0
413.0,12.0
414.0,12.0
414.0,11.0
415.0,11.0
415.0,10.0
417.0,10.0
417.0,9.0
419.0,9.0
419.0,7.0
421.0,7.0
421.0,8.0
422.0,8.0
422.0,10.0
423.0,10.0
423.0,11.0
424.0,11.0
424.0,10.0
425.0,10.0
425.0,9.0
426.0,9.0
426.0,10.0
427.0,10.0
427.0,9.0
430.0,9.0
430.0,8.0
430.0,9.0
432.0,9.0
432.0,10.0
433.0,10.0
433.0,11.0
434.0,11.0
434.0,12.0
436.0,12.0
436.0,10.0
438.0,10.0
438.0,9.0
439.0,9.0
439.0,8.0
440.0,8.0
440.0,7.0
442.0,7.0
442.0,8.0
443.0,8.0
443.0,10.0
444.0,10.0
444.0,9.0
445.0,9.0
445.0,10.0
447.0,10.0
447.0,9.0
447.0,10.0
449.0,10.0
449.0,9.0
451.0,9.0
451.0,8.0
451.0,9.0
453.0,9.0
453.0,10.0
454.0,10.0
454.0,11.0
455.0,11.0
455.0,12.0
457.0,12.0
457.0,10.0
459.0,10.0
459.0,9.0
461.0,9.0
461.0,7.0
464.0,7.0
464.0,10.0
466.0,10.0
466.0,9.0
466.0,10.0
468.0,10.0
468.0,9.0
468.0,10.0
470.0,10.0
470.0,9.0
472.0,9.0
472.0,8.0
473.0,8.0
473.0,9.0
475.0,9.0
475.0,10.0
476.0,10.0
476.0,12.0
478.0,12.0
478.0,11.0
479.0,11.0
479.0,10.0
480.0,10.0
480.0,9.0
482.0,9.0
482.0,8.0
483.0,8.0
483.0,7.0
484.0,7.0
484.0,8.0
486.0,8.0
486.0,7.0
486.0,8.0
486.0,9.0
487.0,9.0
487.0,10.0
489.0,10.0
489.0,11.0
490.0,11.0
490.0,10.0
491.0,10.0
491.0,9.0
492.0,9.0
492.0,10.0
494.0,10.0
494.0,9.0
496.0,9.0
496.0,10.0
498.0,10.0
498.0,12.0
499.0,12.0
499.0,11.0
500.0,11.0
500.0,10.0
502.0,10.0
502.0,9.0
504.0,9.0
504.0,7.0
505.0,7.0
505.0,8.0
507.0,8.0
507.0,9.0
508.0,9.0
508.0,8.0
508.0,9.0
508.0,10.0
511.0,10.0
511.0,9.0
511.0,10.0
512.0,10.0
512.0,9.0
515.0,9.0
515.0,10.0
516.0,10.0
516.0,9.0
518.0,9.0
518.0,11.0
520.0,11.0
520.0,12.0
521.0,12.0
521.0,11.0
522.0,11.0
522.0,9.0
525.0,9.0
525.0,8.0
526.0,8.0
526.0,7.0
527.0,7.0
527.0,8.0
529.0,8.0
529.0,11.0
530.0,11.0
530.0,10.0
533.0,10.0
533.0,8.0
533.0,9.0
536.0,9.0
536.0,10.0
537.0,10.0
537.0,9.0
539.0,9.0
539.0,11.0
540.0,11.0
540.0,12.0
543.0,12.0
543.0,9.0
547.0,9.0
547.0,7.0
549.0,7.0
549.0,9.0
550.0,9.0
550.0,11.0
551.0,11.0
551.0,10.0
553.0,10.0
553.0,9.0
554.0,9.0
554.0,8.0
554.0,9.0
558.0,9.0
558.0,8.0
558.0,9.0
559.0,9.0
559.0,10.0
561.0,10.0
561.0,11.0
562.0,11.0
562.0,12.0
563.0,12.0
563.0,11.0
564.0,11.0
564.0,10.0
565.0,10.0
565.0,9.0
568.0,9.0
568.0,8.0
569.0,8.0
569.0,7.0
569.0,8.0
570.0,8.0
570.0,9.0
572.0,9.0
572.0,8.0
572.0,9.0
572.0,10.0
573.0,10.0
573.0,9.0
576.0,9.0
576.0,8.0
576.0,9.0
578.0,9.0
578.0,10.0
579.0,10.0
579.0,11.0
580.0,11.0
580.0,10.0
582.0,10.0
582.0,11.0
583.0,11.0
583.0,10.0
583.0,11.0
586.0,11.0
586.0,9.0
589.0,9.0
589.0,10.0
590.0,10.0
590.0,8.0
592.0,8.0
592.0,10.0
593.0,10.0
593.0,9.0
594.0,9.0
594.0,8.0
594.0,9.0
596.0,9.0
596.0,8.0
597.0,8.0
597.0,9.0
600.0,9.0
600.0,10.0
601.0,10.0
601.0,11.0
602.0,11.0
602.0,10.0
603.0,10.0
603.0,11.0
604.0,11.0
604.0,10.0
605.0,10.0
605.0,11.0
607.0,11.0
607.0,9.0
611.0,9.0
611.0,8.0
611.0,9.0
612.0,9.0
612.0,8.0
613.0,8.0
613.0,9.0
614.0,9.0
614.0,11.0
615.0,11.0
615.0,10.0
616.0,10.0
616.0,9.0
617.0,9.0
617.0,8.0
618.0,8.0
618.0,9.0
621.0,9.0
621.0,10.0
622.0,10.0
622.0,9.0
623.0,9.0
623.0,11.0
625.0,11.0
625.0,10.0
625.0,11.0
627.0,11.0
627.0,10.0
628.0,10.0
628.0,9.0
632.0,9.0
632.0,7.0
632.0,8.0
633.0,8.0
633.0,9.0
635.0,9.0
635.0,11.0
636.0,11.0
636.0,10.0
637.0,10.0
637.0,8.0
638.0,8.0
638.0,9.0
643.0,9.0
643.0,8.0
643.0,9.0
643.0,10.0
644.0,10.0
644.0,11.0
646.0,11.0
646.0,12.0
647.0,12.0
647.0,11.0
648.0,11.0
648.0,9.0
652.0,9.0
652.0,8.0
653.0,8.0
653.0,7.0
654.0,7.0
654.0,9.0
655.0,9.0
655.0,11.0
656.0,11.0
656.0,10.0
658.0,10.0
658.0,9.0
659.0,9.0
659.0,8.0
659.0,9.0
662.0,9.0
662.0,10.0
663.0,10.0
663.0,9.0
664.0,9.0
664.0,10.0
665.0,10.0
665.0,11.0
667.0,11.0
667.0,12.0
668.0,12.0
668.0,11.0
669.0,11.0
669.0,9.0
673.0,9.0
673.0,7.0
675.0,7.0
675.0,8.0
676.0,8.0
676.0,11.0
678.0,11.0
678.0,10.0
679.0,10.0
679.0,9.0
679.0,10.0
680.0,10.0
680.0,9.0
684.0,9.0
684.0,8.0
684.0,9.0
685.0,9.0
685.0,10.0
687.0,10.0
687.0,11.0
688.0,11.0
688.0,12.0
689.0,12.0
689.0,10.0
691.0,10.0
691.0,9.0
694.0,9.0
694.0,8.0
695.0,8.0
695.0,7.0
695.0,8.0
695.0,9.0
697.0,9.0
697.0,10.0
698.0,10.0
698.0,9.0
698.0,10.0
699.0,10.0
699.0,9.0
701.0,9.0
701.0,8.0
702.0,8.0
702.0,9.0
705.0,9.0
705.0,10.0
706.0,10.0
706.0,9.0
706.0,10.0
707.0,10.0
707.0,11.0
710.0,11.0
710.0,10.0
710.0,11.0
711.0,11.0
711.0,10.0
712.0,10.0
712.0,9.0
716.0,9.0
716.0,7.0
716.0,8.0
718.0,8.0
718.0,9.0
719.0,9.0
719.0,10.0
720.0,10.0
720.0,9.0
720.0,10.0
721.0,10.0
721.0,9.0
722.0,9.0
722.0,8.0
722.0,9.0
726.0,9.0
726.0,10.0
727.0,10.0
727.0,11.0
728.0,11.0
728.0,10.0
728.0,11.0
730.0,11.0
730.0,10.0
732.0,10.0
732.0,8.0
732.0,9.0
736.0,9.0
736.0,8.0
737.0,8.0
737.0,7.0
737.0,8.0
738.0,8.0
738.0,10.0
740.0,10.0
740.0,11.0
741.0,11.0
741.0,10.0
742.0,10.0
742.0,8.0
744.0,8.0
744.0,9.0
748.0,9.0
748.0,8.0
748.0,9.0
749.0,9.0
749.0,11.0
751.0,11.0
751.0,12.0
752.0,12.0
752.0,11.0
753.0,11.0
753.0,10.0
754.0,10.0
754.0,9.0
757.0,9.0
757.0,8.0
758.0,8.0
758.0,7.0
758.0,8.0
759.0,8.0
759.0,9.0
761.0,9.0
761.0,11.0
762.0,11.0
762.0,10.0
763.0,10.0
763.0,8.0
764.0,8.0
764.0,9.0
768.0,9.0
768.0,10.0
769.0,10.0
769.0,9.0
770.0,9.0
770.0,11.0
772.0,11.0
772.0,10.0
772.0,11.0
774.0,11.0
774.0,9.0
778.0,9.0
778.0,7.0
778.0,8.0
781.0,8.0
781.0,10.0
782.0,10.0
782.0,9.0
782.0,10.0
783.0,10.0
783.0,9.0
784.0,9.0
784.0,10.0
785.0,10.0
785.0,9.0
788.0,9.0
788.0,10.0
790.0,10.0
790.0,9.0
790.0,10.0
791.0,10.0
791.0,11.0
792.0,11.0
792.0,10.0
794.0,10.0
794.0,9.0
794.0,10.0
795.0,10.0
795.0,9.0
799.0,9.0
799.0,7.0
799.0,8.0
800.0,8.0
800.0,9.0
802.0,9.0
802.0,11.0
803.0,11.0
803.0,10.0
804.0,10.0
804.0,9.0
806.0,9.0
806.0,8.0
806.0,9.0
810.0,9.0
810.0,8.0
810.0,9.0
810.0,10.0
813.0,10.0
813.0,11.0
814.0,11.0
814.0,10.0
814.0,11.0
816.0,11.0
816.0,10.0
817.0,10.0
817.0,9.0
820.0,9.0
820.0,8.0
821.0,8.0
821.0,7.0
821.0,8.0
822.0,8.0
822.0,9.0
823.0,9.0
823.0,11.0
824.0,11.0
824.0,10.0
825.0,10.0
825.0,9.0
827.0,9.0
827.0,8.0
828.0,8.0
828.0,9.0
830.0,9.0
830.0,10.0
831.0,10.0
831.0,9.0
832.0,9.0
832.0,10.0
833.0,10.0
833.0,11.0
835.0,11.0
835.0,12.0
836.0,12.0
836.0,11.0
837.0,11.0
837.0,10.0
838.0,10.0
838.0,9.0
842.0,9.0
842.0,7.0
843.0,7.0
843.0,8.0
844.0,8.0
844.0,10.0
846.0,10.0
846.0,9.0
846.0,10.0
847.0,10.0
847.0,9.0
848.0,9.0
848.0,8.0
849.0,8.0
849.0,9.0
852.0,9.0
852.0,10.0
853.0,10.0
853.0,11.0
854.0,11.0
854.0,10.0
854.0,11.0
857.0,11.0
857.0,10.0
857.0,11.0
858.0,11.0
858.0,10.0
859.0,10.0
859.0,9.0
862.0,9.0
862.0,8.0
863.0,8.0
863.0,7.0
864.0,7.0
864.0,9.0
865.0,9.0
865.0,11.0
867.0,11.0
867.0,10.0
868.0,10.0
868.0,8.0
870.0,8.0
870.0,9.0
873.0,9.0
873.0,8.0
874.0,8.0
874.0,10.0
875.0,10.0
875.0,11.0
877.0,11.0
877.0,12.0
878.0,12.0
878.0,11.0
879.0,11.0
879.0,10.0
880.0,10.0
880.0,9.0
883.0,9.0
883.0,8.0
884.0,8.0
884.0,7.0
884.0,8.0
886.0,8.0
886.0,10.0
887.0,10.0
887.0,11.0
888.0,11.0
888.0,10.0
889.0,10.0
889.0,9.0
890.0,9.0
890.0,8.0
891.0,8.0
891.0,9.0
894.0,9.0
894.0,8.0
894.0,9.0
896.0,9.0
896.0,11.0
898.0,11.0
898.0,10.0
898.0,11.0
900.0,11.0
900.0,10.0
901.0,10.0
901.0,9.0
903.0,9.0
903.0,8.0
904.0,8.0
904.0,7.0
905.0,7.0
905.0,8.0
906.0,8.0
906.0,9.0
907.0,9.0
907.0,10.0
908.0,10.0
908.0,11.0
909.0,11.0
909.0,10.0
910.0,10.0
910.0,8.0
910.0,9.0
915.0,9.0
915.0,8.0
915.0,9.0
916.0,9.0
916.0,10.0
917.0,10.0
917.0,11.0
918.0,11.0
918.0,12.0
919.0,12.0
919.0,11.0
920.0,11.0
920.0,9.0
923.0,9.0
923.0,8.0
924.0,8.0
924.0,7.0
925.0,7.0
925.0,8.0
927.0,8.0
927.0,11.0
929.0,11.0
929.0,9.0
930.0,9.0
930.0,10.0
931.0,10.0
931.0,9.0
935.0,9.0
935.0,8.0
936.0,8.0
936.0,10.0
938.0,10.0
938.0,12.0
940.0,12.0
940.0,10.0
942.0,10.0
942.0,9.0
944.0,9.0
944.0,8.0
945.0,8.0
945.0,7.0
946.0,7.0
946.0,8.0
947.0,8.0
947.0,9.0
948.0,9.0
948.0,11.0
949.0,11.0
949.0,10.0
950.0,10.0
950.0,9.0
951.0,9.0
951.0,10.0
952.0,10.0
952.0,9.0
955.0,9.0
955.0,10.0
956.0,10.0
956.0,9.0
956.0,10.0
958.0,10.0
958.0,11.0
959.0,11.0
959.0,12.0
960.0,12.0
960.0,11.0
961.0,11.0
961.0,10.0
962.0,10.0
962.0,9.0
965.0,9.0
965.0,7.0
966.0,7.0
966.0,8.0
967.0,8.0
967.0,9.0
968.0,9.0
968.0,11.0
969.0,11.0
969.0,10.0
970.0,10.0
970.0,9.0
972.0,9.0
972.0,8.0
972.0,9.0
975.0,9.0
975.0,10.0
976.0,10.0
976.0,9.0
976.0,10.0
978.0,10.0
978.0,11.0
980.0,11.0
980.0,10.0
980.0,11.0
982.0,11.0
982.0,9.0
985.0,9.0
985.0,8.0
986.0,8.0
986.0,7.0
987.0,7.0
987.0,8.0
988.0,8.0
988.0,9.0
989.0,9.0
989.0,11.0
991.0,11.0
991.0,9.0
992.0,9.0
992.0,8.0
993.0,8.0
993.0,9.0
997.0,9.0
997.0,8.0
997.0,9.0
998.0,9.0
998.0,10.0
999.0,10.0
999.0,11.0
1000.000002,11.0
					</series>
					<series title="sum (x:(const (label station_t:(range (int) &quot;0&quot; &quot;STATIONS - 1&quot;)))) !Station[x].waiting" type="l" color="0x0000ff" encoding="csv">0.0,0.0
4.0,0.0
4.0,1.0
10.0,1.0
10.0,0.0
14.0,0.0
14.0,1.0
20.0,1.0
20.0,0.0
24.0,0.0
24.0,1.0
30.0,1.0
30.0,2.0
30.0,1.0
34.0,1.0
34.0,2.0
36.0,2.0
36.0,1.0
40.0,1.0
40.0,2.0
40.0,1.0
44.0,1.0
44.0,2.0
46.0,2.0
46.0,1.0
50.0,1.0
50.0,2.0
50.0,1.0
54.0,1.0
54.0,2.0
56.0,2.0
56.0,1.0
60.0,1.0
60.0,2.0
61.0,2.0
61.0,1.0
65.0,1.0
65.0,3.0
66.0,3.0
66.0,2.0
68.0,2.0
68.0,1.0
70.0,1.0
70.0,2.0
72.0,2.0
72.0,1.0
76.0,1.0
76.0,3.0
76.0,2.0
79.0,2.0
79.0,1.0
81.0,1.0
81.0,2.0
82.0,2.0
82.0,1.0
85.0,1.0
85.0,2.0
86.0,2.0
86.0,4.0
88.0,4.0
88.0,2.0
89.0,2.0
89.0,3.0
92.0,3.0
92.0,4.0
92.0,3.0
93.0,3.0
93.0,2.0
96.0,2.0
96.0,3.0
96.0,2.0
97.0,2.0
97.0,3.0
99.0,3.0
99.0,2.0
100.0,2.0
100.0,1.0
102.0,1.0
102.0,2.0
103.0,2.0
103.0,3.0
104.0,3.0
104.0,2.0
105.0,2.0
105.0,3.0
106.0,3.0
106.0,4.0
108.0,4.0
108.0,5.0
108.0,4.0
108.0,3.0
109.0,3.0
109.0,2.0
110.0,2.0
110.0,3.0
112.0,3.0
112.0,2.0
113.0,2.0
113.0,3.0
114.0,3.0
114.0,2.0
116.0,2.0
116.0,3.0
117.0,3.0
117.0,2.0
118.0,2.0
118.0,3.0
119.0,3.0
119.0,1.0
122.0,1.0
122.0,2.0
124.0,2.0
124.0,3.0
124.0,2.0
128.0,2.0
128.0,5.0
128.0,4.0
130.0,4.0
130.0,5.0
130.0,4.0
132.0,4.0
132.0,3.0
134.0,3.0
134.0,4.0
134.0,3.0
135.0,3.0
135.0,2.0
136.0,2.0
136.0,1.0
138.0,1.0
138.0,2.0
140.0,2.0
140.0,3.0
141.0,3.0
141.0,2.0
144.0,2.0
144.0,1.0
145.0,1.0
145.0,3.0
145.0,2.0
148.0,2.0
148.0,3.0
149.0,3.0
149.0,5.0
151.0,5.0
151.0,2.0
154.0,2.0
154.0,3.0
155.0,3.0
155.0,4.0
155.0,3.0
155.0,2.0
159.0,2.0
159.0,4.0
160.0,4.0
160.0,3.0
161.0,3.0
161.0,2.0
163.0,2.0
163.0,1.0
165.0,1.0
165.0,3.0
165.0,2.0
169.0,2.0
169.0,3.0
170.0,3.0
170.0,5.0
172.0,5.0
172.0,3.0
173.0,3.0
173.0,2.0
174.0,2.0
174.0,3.0
175.0,3.0
175.0,2.0
176.0,2.0
176.0,3.0
176.0,2.0
179.0,2.0
179.0,3.0
180.0,3.0
180.0,2.0
181.0,2.0
181.0,3.0
183.0,3.0
183.0,2.0
184.0,2.0
184.0,1.0
185.0,1.0
185.0,0.0
186.0,0.0
186.0,1.0
187.0,1.0
187.0,2.0
189.0,2.0
189.0,3.0
190.0,3.0
190.0,4.0
191.0,4.0
191.0,5.0
192.0,5.0
192.0,4.0
193.0,4.0
193.0,3.0
194.0,3.0
194.0,4.0
194.0,3.0
195.0,3.0
195.0,2.0
197.0,2.0
197.0,3.0
198.0,3.0
198.0,2.0
199.0,2.0
199.0,3.0
200.0,3.0
200.0,2.0
202.0,2.0
202.0,3.0
204.0,3.0
204.0,2.0
205.0,2.0
205.0,0.0
208.0,0.0
208.0,2.0
209.0,2.0
209.0,3.0
212.0,3.0
212.0,5.0
214.0,5.0
214.0,3.0
215.0,3.0
215.0,1.0
216.0,1.0
216.0,2.0
218.0,2.0
218.0,3.0
218.0,2.0
219.0,2.0
219.0,3.0
222.0,3.0
222.0,2.0
223.0,2.0
223.0,3.0
224.0,3.0
224.0,2.0
225.0,2.0
225.0,1.0
227.0,1.0
227.0,0.0
228.0,0.0
228.0,2.0
229.0,2.0
229.0,3.0
233.0,3.0
233.0,5.0
234.0,5.0
234.0,3.0
235.0,3.0
235.0,2.0
236.0,2.0
236.0,1.0
237.0,1.0
237.0,2.0
238.0,2.0
238.0,3.0
239.0,3.0
239.0,4.0
239.0,3.0
243.0,3.0
243.0,2.0
244.0,2.0
244.0,3.0
244.0,2.0
245.0,2.0
245.0,1.0
248.0,1.0
248.0,2.0
248.0,1.0
249.0,1.0
249.0,3.0
253.0,3.0
253.0,4.0
254.0,4.0
254.0,5.0
254.0,4.0
255.0,4.0
255.0,3.0
256.0,3.0
256.0,1.0
258.0,1.0
258.0,3.0
260.0,3.0
260.0,4.0
260.0,3.0
264.0,3.0
264.0,4.0
265.0,4.0
265.0,2.0
267.0,2.0
267.0,1.0
268.0,1.0
268.0,0.0
269.0,0.0
269.0,1.0
270.0,1.0
270.0,2.0
271.0,2.0
271.0,3.0
273.0,3.0
273.0,4.0
274.0,4.0
274.0,5.0
275.0,5.0
275.0,4.0
277.0,4.0
277.0,1.0
279.0,1.0
279.0,3.0
280.0,3.0
280.0,2.0
281.0,2.0
281.0,3.0
285.0,3.0
285.0,4.0
285.0,3.0
286.0,3.0
286.0,2.0
287.0,2.0
287.0,1.0
288.0,1.0
288.0,0.0
289.0,0.0
289.0,1.0
290.0,1.0
290.0,2.0
291.0,2.0
291.0,3.0
294.0,3.0
294.0,5.0
296.0,5.0
296.0,3.0
298.0,3.0
298.0,4.0
298.0,3.0
298.0,2.0
300.0,2.0
300.0,3.0
301.0,3.0
301.0,2.0
302.0,2.0
302.0,3.0
304.0,3.0
304.0,2.0
306.0,2.0
306.0,3.0
307.0,3.0
307.0,2.0
308.0,2.0
308.0,1.0
310.0,1.0
310.0,0.0
311.0,0.0
311.0,2.0
312.0,2.0
312.0,3.0
314.0,3.0
314.0,4.0
315.0,4.0
315.0,5.0
317.0,5.0
317.0,4.0
318.0,4.0
318.0,2.0
319.0,2.0
319.0,1.0
320.0,1.0
320.0,2.0
321.0,2.0
321.0,3.0
321.0,2.0
323.0,2.0
323.0,3.0
326.0,3.0
326.0,4.0
327.0,4.0
327.0,3.0
328.0,3.0
328.0,2.0
329.0,2.0
329.0,1.0
330.0,1.0
330.0,0.0
331.0,0.0
331.0,1.0
332.0,1.0
332.0,2.0
333.0,2.0
333.0,3.0
336.0,3.0
336.0,5.0
337.0,5.0
337.0,4.0
338.0,4.0
338.0,3.0
340.0,3.0
340.0,4.0
340.0,3.0
340.0,2.0
342.0,2.0
342.0,3.0
342.0,2.0
344.0,2.0
344.0,3.0
346.0,3.0
346.0,2.0
348.0,2.0
348.0,3.0
348.0,2.0
350.0,2.0
350.0,1.0
352.0,1.0
352.0,3.0
352.0,2.0
354.0,2.0
354.0,3.0
357.0,3.0
357.0,5.0
358.0,5.0
358.0,3.0
360.0,3.0
360.0,2.0
361.0,2.0
361.0,1.0
362.0,1.0
362.0,3.0
363.0,3.0
363.0,2.0
364.0,2.0
364.0,3.0
368.0,3.0
368.0,2.0
369.0,2.0
369.0,3.0
369.0,2.0
370.0,2.0
370.0,1.0
372.0,1.0
372.0,2.0
372.0,1.0
373.0,1.0
373.0,2.0
374.0,2.0
374.0,3.0
377.0,3.0
377.0,4.0
378.0,4.0
378.0,5.0
379.0,5.0
379.0,4.0
380.0,4.0
380.0,2.0
381.0,2.0
381.0,1.0
382.0,1.0
382.0,2.0
383.0,2.0
383.0,3.0
385.0,3.0
385.0,4.0
385.0,3.0
388.0,3.0
388.0,4.0
389.0,4.0
389.0,3.0
390.0,3.0
390.0,2.0
391.0,2.0
391.0,1.0
392.0,1.0
392.0,0.0
394.0,0.0
394.0,1.0
395.0,1.0
395.0,2.0
396.0,2.0
396.0,3.0
397.0,3.0
397.0,4.0
398.0,4.0
398.0,5.0
400.0,5.0
400.0,4.0
401.0,4.0
401.0,3.0
402.0,3.0
402.0,2.0
403.0,2.0
403.0,1.0
404.0,1.0
404.0,3.0
405.0,3.0
405.0,2.0
407.0,2.0
407.0,3.0
409.0,3.0
409.0,4.0
410.0,4.0
410.0,3.0
411.0,3.0
411.0,2.0
413.0,2.0
413.0,0.0
414.0,0.0
414.0,1.0
415.0,1.0
415.0,2.0
417.0,2.0
417.0,3.0
419.0,3.0
419.0,5.0
421.0,5.0
421.0,4.0
422.0,4.0
422.0,2.0
423.0,2.0
423.0,1.0
424.0,1.0
424.0,2.0
425.0,2.0
425.0,3.0
426.0,3.0
426.0,2.0
427.0,2.0
427.0,3.0
430.0,3.0
430.0,4.0
430.0,3.0
432.0,3.0
432.0,2.0
433.0,2.0
433.0,1.0
434.0,1.0
434.0,0.0
436.0,0.0
436.0,2.0
438.0,2.0
438.0,3.0
439.0,3.0
439.0,4.0
440.0,4.0
440.0,5.0
442.0,5.0
442.0,4.0
443.0,4.0
443.0,2.0
444.0,2.0
444.0,3.0
445.0,3.0
445.0,2.0
447.0,2.0
447.0,3.0
447.0,2.0
449.0,2.0
449.0,3.0
451.0,3.0
451.0,4.0
451.0,3.0
453.0,3.0
453.0,2.0
454.0,2.0
454.0,1.0
455.0,1.0
455.0,0.0
457.0,0.0
457.0,2.0
459.0,2.0
459.0,3.0
461.0,3.0
461.0,5.0
464.0,5.0
464.0,2.0
466.0,2.0
466.0,3.0
466.0,2.0
468.0,2.0
468.0,3.0
468.0,2.0
470.0,2.0
470.0,3.0
472.0,3.0
472.0,4.0
473.0,4.0
473.0,3.0
475.0,3.0
475.0,2.0
476.0,2.0
476.0,0.0
478.0,0.0
478.0,1.0
479.0,1.0
479.0,2.0
480.0,2.0
480.0,3.0
482.0,3.0
482.0,4.0
483.0,4.0
483.0,5.0
484.0,5.0
484.0,4.0
486.0,4.0
486.0,5.0
486.0,4.0
486.0,3.0
487.0,3.0
487.0,2.0
489.0,2.0
489.0,1.0
490.0,1.0
490.0,2.0
491.0,2.0
491.0,3.0
492.0,3.0
492.0,2.0
494.0,2.0
494.0,3.0
496.0,3.0
496.0,2.0
498.0,2.0
498.0,0.0
499.0,0.0
499.0,1.0
500.0,1.0
500.0,2.0
502.0,2.0
502.0,3.0
504.0,3.0
504.0,5.0
505.0,5.0
505.0,4.0
507.0,4.0
507.0,3.0
508.0,3.0
508.0,4.0
508.0,3.0
508.0,2.0
511.0,2.0
511.0,3.0
511.0,2.0
512.0,2.0
512.0,3.0
515.0,3.0
515.0,2.0
516.0,2.0
516.0,3.0
518.0,3.0
518.0,1.0
520.0,1.0
520.0,0.0
521.0,0.0
521.0,1.0
522.0,1.0
522.0,3.0
525.0,3.0
525.0,4.0
526.0,4.0
526.0,5.0
527.0,5.0
527.0,4.0
529.0,4.0
529.0,1.0
530.0,1.0
530.0,2.0
533.0,2.0
533.0,4.0
533.0,3.0
536.0,3.0
536.0,2.0
537.0,2.0
537.0,3.0
539.0,3.0
539.0,1.0
540.0,1.0
540.0,0.0
543.0,0.0
543.0,3.0
547.0,3.0
547.0,5.0
549.0,5.0
549.0,3.0
550.0,3.0
550.0,1.0
551.0,1.0
551.0,2.0
553.0,2.0
553.0,3.0
554.0,3.0
554.0,4.0
554.0,3.0
558.0,3.0
558.0,4.0
558.0,3.0
559.0,3.0
559.0,2.0
561.0,2.0
561.0,1.0
562.0,1.0
562.0,0.0
563.0,0.0
563.0,1.0
564.0,1.0
564.0,2.0
565.0,2.0
565.0,3.0
568.0,3.0
568.0,4.0
569.0,4.0
569.0,5.0
569.0,4.0
570.0,4.0
570.0,3.0
572.0,3.0
572.0,4.0
572.0,3.0
572.0,2.0
573.0,2.0
573.0,3.0
576.0,3.0
576.0,4.0
576.0,3.0
578.0,3.0
578.0,2.0
579.0,2.0
579.0,1.0
580.0,1.0
580.0,2.0
582.0,2.0
582.0,1.0
583.0,1.0
583.0,2.0
583.0,1.0
586.0,1.0
586.0,3.0
589.0,3.0
589.0,2.0
590.0,2.0
590.0,4.0
592.0,4.0
592.0,2.0
593.0,2.0
593.0,3.0
594.0,3.0
594.0,4.0
594.0,3.0
596.0,3.0
596.0,4.0
597.0,4.0
597.0,3.0
600.0,3.0
600.0,2.0
601.0,2.0
601.0,1.0
602.0,1.0
602.0,2.0
603.0,2.0
603.0,1.0
604.0,1.0
604.0,2.0
605.0,2.0
605.0,1.0
607.0,1.0
607.0,3.0
611.0,3.0
611.0,4.0
611.0,3.0
612.0,3.0
612.0,4.0
613.0,4.0
613.0,3.0
614.0,3.0
614.0,1.0
615.0,1.0
615.0,2.0
616.0,2.0
616.0,3.0
617.0,3.0
617.0,4.0
618.0,4.0
618.0,3.0
621.0,3.0
621.0,2.0
622.0,2.0
622.0,3.0
623.0,3.0
623.0,1.0
625.0,1.0
625.0,2.0
625.0,1.0
627.0,1.0
627.0,2.0
628.0,2.0
628.0,3.0
632.0,3.0
632.0,5.0
632.0,4.0
633.0,4.0
633.0,3.0
635.0,3.0
635.0,1.0
636.0,1.0
636.0,2.0
637.0,2.0
637.0,4.0
638.0,4.0
638.0,3.0
643.0,3.0
643.0,4.0
643.0,3.0
643.0,2.0
644.0,2.0
644.0,1.0
646.0,1.0
646.0,0.0
647.0,0.0
647.0,1.0
648.0,1.0
648.0,3.0
652.0,3.0
652.0,4.0
653.0,4.0
653.0,5.0
654.0,5.0
654.0,3.0
655.0,3.0
655.0,1.0
656.0,1.0
656.0,2.0
658.0,2.0
658.0,3.0
659.0,3.0
659.0,4.0
659.0,3.0
662.0,3.0
662.0,2.0
663.0,2.0
663.0,3.0
664.0,3.0
664.0,2.0
665.0,2.0
665.0,1.0
667.0,1.0
667.0,0.0
668.0,0.0
668.0,1.0
669.0,1.0
669.0,3.0
673.0,3.0
673.0,5.0
675.0,5.0
675.0,4.0
676.0,4.0
676.0,1.0
678.0,1.0
678.0,2.0
679.0,2.0
679.0,3.0
679.0,2.0
680.0,2.0
680.0,3.0
684.0,3.0
684.0,4.0
684.0,3.0
685.0,3.0
685.0,2.0
687.0,2.0
687.0,1.0
688.0,1.0
688.0,0.0
689.0,0.0
689.0,2.0
691.0,2.0
691.0,3.0
694.0,3.0
694.0,4.0
695.0,4.0
695.0,5.0
695.0,4.0
695.0,3.0
697.0,3.0
697.0,2.0
698.0,2.0
698.0,3.0
698.0,2.0
699.0,2.0
699.0,3.0
701.0,3.0
701.0,4.0
702.0,4.0
702.0,3.0
705.0,3.0
705.0,2.0
706.0,2.0
706.0,3.0
706.0,2.0
707.0,2.0
707.0,1.0
710.0,1.0
710.0,2.0
710.0,1.0
711.0,1.0
711.0,2.0
712.0,2.0
712.0,3.0
716.0,3.0
716.0,5.0
716.0,4.0
718.0,4.0
718.0,3.0
719.0,3.0
719.0,2.0
720.0,2.0
720.0,3.0
720.0,2.0
721.0,2.0
721.0,3.0
722.0,3.0
722.0,4.0
722.0,3.0
726.0,3.0
726.0,2.0
727.0,2.0
727.0,1.0
728.0,1.0
728.0,2.0
728.0,1.0
730.0,1.0
730.0,2.0
732.0,2.0
732.0,4.0
732.0,3.0
736.0,3.0
736.0,4.0
737.0,4.0
737.0,5.0
737.0,4.0
738.0,4.0
738.0,2.0
740.0,2.0
740.0,1.0
741.0,1.0
741.0,2.0
742.0,2.0
742.0,4.0
744.0,4.0
744.0,3.0
748.0,3.0
748.0,4.0
748.0,3.0
749.0,3.0
749.0,1.0
751.0,1.0
751.0,0.0
752.0,0.0
752.0,1.0
753.0,1.0
753.0,2.0
754.0,2.0
754.0,3.0
757.0,3.0
757.0,4.0
758.0,4.0
758.0,5.0
758.0,4.0
759.0,4.0
759.0,3.0
761.0,3.0
761.0,1.0
762.0,1.0
762.0,2.0
763.0,2.0
763.0,4.0
764.0,4.0
764.0,3.0
768.0,3.0
768.0,2.0
769.0,2.0
769.0,3.0
770.0,3.0
770.0,1.0
772.0,1.0
772.0,2.0
772.0,1.0
774.0,1.0
774.0,3.0
778.0,3.0
778.0,5.0
778.0,4.0
781.0,4.0
781.0,2.0
782.0,2.0
782.0,3.0
782.0,2.0
783.0,2.0
783.0,3.0
784.0,3.0
784.0,2.0
785.0,2.0
785.0,3.0
788.0,3.0
788.0,2.0
790.0,2.0
790.0,3.0
790.0,2.0
791.0,2.0
791.0,1.0
792.0,1.0
792.0,2.0
794.0,2.0
794.0,3.0
794.0,2.0
795.0,2.0
795.0,3.0
799.0,3.0
799.0,5.0
799.0,4.0
800.0,4.0
800.0,3.0
802.0,3.0
802.0,1.0
803.0,1.0
803.0,2.0
804.0,2.0
804.0,3.0
806.0,3.0
806.0,4.0
806.0,3.0
810.0,3.0
810.0,4.0
810.0,3.0
810.0,2.0
813.0,2.0
813.0,1.0
814.0,1.0
814.0,2.0
814.0,1.0
816.0,1.0
816.0,2.0
817.0,2.0
817.0,3.0
820.0,3.0
820.0,4.0
821.0,4.0
821.0,5.0
821.0,4.0
822.0,4.0
822.0,3.0
823.0,3.0
823.0,1.0
824.0,1.0
824.0,2.0
825.0,2.0
825.0,3.0
827.0,3.0
827.0,4.0
828.0,4.0
828.0,3.0
830.0,3.0
830.0,2.0
831.0,2.0
831.0,3.0
832.0,3.0
832.0,2.0
833.0,2.0
833.0,1.0
835.0,1.0
835.0,0.0
836.0,0.0
836.0,1.0
837.0,1.0
837.0,2.0
838.0,2.0
838.0,3.0
842.0,3.0
842.0,5.0
843.0,5.0
843.0,4.0
844.0,4.0
844.0,2.0
846.0,2.0
846.0,3.0
846.0,2.0
847.0,2.0
847.0,3.0
848.0,3.0
848.0,4.0
849.0,4.0
849.0,3.0
852.0,3.0
852.0,2.0
853.0,2.0
853.0,1.0
854.0,1.0
854.0,2.0
854.0,1.0
857.0,1.0
857.0,2.0
857.0,1.0
858.0,1.0
858.0,2.0
859.0,2.0
859.0,3.0
862.0,3.0
862.0,4.0
863.0,4.0
863.0,5.0
864.0,5.0
864.0,3.0
865.0,3.0
865.0,1.0
867.0,1.0
867.0,2.0
868.0,2.0
868.0,4.0
870.0,4.0
870.0,3.0
873.0,3.0
873.0,4.0
874.0,4.0
874.0,2.0
875.0,2.0
875.0,1.0
877.0,1.0
877.0,0.0
878.0,0.0
878.0,1.0
879.0,1.0
879.0,2.0
880.0,2.0
880.0,3.0
883.0,3.0
883.0,4.0
884.0,4.0
884.0,5.0
884.0,4.0
886.0,4.0
886.0,2.0
887.0,2.0
887.0,1.0
888.0,1.0
888.0,2.0
889.0,2.0
889.0,3.0
890.0,3.0
890.0,4.0
891.0,4.0
891.0,3.0
894.0,3.0
894.0,4.0
894.0,3.0
896.0,3.0
896.0,1.0
898.0,1.0
898.0,2.0
898.0,1.0
900.0,1.0
900.0,2.0
901.0,2.0
901.0,3.0
903.0,3.0
903.0,4.0
904.0,4.0
904.0,5.0
905.0,5.0
905.0,4.0
906.0,4.0
906.0,3.0
907.0,3.0
907.0,2.0
908.0,2.0
908.0,1.0
909.0,1.0
909.0,2.0
910.0,2.0
910.0,4.0
910.0,3.0
915.0,3.0
915.0,4.0
915.0,3.0
916.0,3.0
916.0,2.0
917.0,2.0
917.0,1.0
918.0,1.0
918.0,0.0
919.0,0.0
919.0,1.0
920.0,1.0
920.0,3.0
923.0,3.0
923.0,4.0
924.0,4.0
924.0,5.0
925.0,5.0
925.0,4.0
927.0,4.0
927.0,1.0
929.0,1.0
929.0,3.0
930.0,3.0
930.0,2.0
931.0,2.0
931.0,3.0
935.0,3.0
935.0,4.0
936.0,4.0
936.0,2.0
938.0,2.0
938.0,0.0
940.0,0.0
940.0,2.0
942.0,2.0
942.0,3.0
944.0,3.0
944.0,4.0
945.0,4.0
945.0,5.0
946.0,5.0
946.0,4.0
947.0,4.0
947.0,3.0
948.0,3.0
948.0,1.0
949.0,1.0
949.0,2.0
950.0,2.0
950.0,3.0
951.0,3.0
951.0,2.0
952.0,2.0
952.0,3.0
955.0,3.0
955.0,2.0
956.0,2.0
956.0,3.0
956.0,2.0
958.0,2.0
958.0,1.0
959.0,1.0
959.0,0.0
960.0,0.0
960.0,1.0
961.0,1.0
961.0,2.0
962.0,2.0
962.0,3.0
965.0,3.0
965.0,5.0
966.0,5.0
966.0,4.0
967.0,4.0
967.0,3.0
968.0,3.0
968.0,1.0
969.0,1.0
969.0,2.0
970.0,2.0
970.0,3.0
972.0,3.0
972.0,4.0
972.0,3.0
975.0,3.0
975.0,2.0
976.0,2.0
976.0,3.0
976.0,2.0
978.0,2.0
978.0,1.0
980.0,1.0
980.0,2.0
980.0,1.0
982.0,1.0
982.0,3.0
985.0,3.0
985.0,4.0
986.0,4.0
986.0,5.0
987.0,5.0
987.0,4.0
988.0,4.0
988.0,3.0
989.0,3.0
989.0,1.0
991.0,1.0
991.0,3.0
992.0,3.0
992.0,4.0
993.0,4.0
993.0,3.0
997.0,3.0
997.0,4.0
997.0,3.0
998.0,3.0
998.0,2.0
999.0,2.0
999.0,1.0
1000.000002,1.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
